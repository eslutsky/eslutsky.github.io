<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oVirt</title>
  <subtitle>Tag: Ci</subtitle>
  <id>http://ovirt.org/blog/</id>
  <link href="http://ovirt.org/blog/"/>
  <link href="http://ovirt.org/blog/tag/ci.xml" rel="self"/>
  <updated>2019-05-27T15:35:00+00:00</updated>
  <author>
    <name/>
  </author>
  <entry>
    <title>oVirt Gamification--The oVirt Game You Didn't Know you Were Playing</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/02/oVirt-gamification.html"/>
    <id>http://ovirt.org/blog/2017/02/oVirt-gamification.html</id>
    <published>2017-02-27T16:35:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Eyal Edri</name>
    </author>
    <content type="html">&lt;p&gt;Gamification is the concept of applying game mechanics and game design techniques to &lt;a href="http://blogs.gartner.com/brian_burke/2014/04/04/gartner-redefines-gamification/"&gt;engage and motivate people to achieve their goals&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It taps into the basic desires and needs of the users impulses which revolve around the idea of Status and Achievement.&lt;/p&gt;

&lt;p&gt;To put it in other words, it is turning day-to-day tasks, the kind you might do at home or work, into a game which you can earn points, badges and compete with other people that are doing the same things.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="ovirt--gamification"&gt;oVirt &amp;amp; Gamification&lt;/h2&gt;

&lt;p&gt;You probably didn't know, but this isn't the first time oVirt gamification is being used. A few years ago there was an initiative to use oVirt UI plugins system to add Gamification to the project, there was even a "space invaders" game &lt;a href="https://www.ovirt.org/community/activities/gamification/"&gt;written and available to play inside oVirt&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id="so-what-is-new"&gt;So What is New?&lt;/h3&gt;

&lt;p&gt;The oVirt infra team recently reached out to 'GetBadges', a company which provides 'Gamification as a Service'. Luckily for us, open source projects get to have a free game! So oVirt was rewarded with its own &lt;a href="https://ovirt-ovirt-engine.getbadges.io/activity"&gt;oVirt Open Source Game&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The game works automagically every time you contribute to the project. Current integrations are only active on specific projects like 'ovirt-engine' and 'vdsm'. If you wish to add your project to the game, please reach out to oVirt infra team and ask to add it. Current activation channels are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub  - any commit merged rewards points&lt;/li&gt;
  &lt;li&gt;Jenkins - any successful build rewards points and failed builds deduct points&lt;/li&gt;
  &lt;li&gt;Jira    - any new ticket opened or closed in jira.ovirt.org rewards points&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other than points, you are rewarded with cool badges every time you accomplish an achievement, like triggering a first successful build. There are more cool features like slaying monsters :), you can read more detailed info on the GetBadges links below.&lt;/p&gt;

&lt;h3 id="ovirt-2016-game-stats"&gt;oVirt 2016 Game Stats&lt;/h3&gt;

&lt;p&gt;So you might ask yourself how are you doing so far in the game. Checkout the 2016 statistics shown in the infographic below.&lt;/p&gt;

&lt;p&gt;&lt;img alt="oVirt Game 2016 Statistics" width="1155" height="2570" src="/images/oVirt-game-stats.png?1560777613" /&gt;&lt;/p&gt;

&lt;h2 id="more-info-on-getbadges-and-the-game-elements"&gt;More Info on GetBadges and the Game Elements&lt;/h2&gt;

&lt;p&gt;You can find more info and details on the GetBadges game on the their blog site.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://getbadges.io/blog/frequently-asked-questions-1"&gt;FAQ Part I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://getbadges.io/blog/frequently-asked-questions-pt-2"&gt;FAQ Part II&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://getbadges.io/blog/"&gt;GetBadges Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://getbadges.io/blog/understanding-badges-in-our-it-gamification-platform"&gt;Understanding Badges&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://getbadges.io/blog/how-to-motivate-developers"&gt;How to motivate developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Game on!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>oVirt System Tests to the Rescue!&amp;mdash;How to Run End-to-End oVirt Tests on Your Patch</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/01/ovirt-system-tests-to-the-rescue.html"/>
    <id>http://ovirt.org/blog/2017/01/ovirt-system-tests-to-the-rescue.html</id>
    <published>2017-01-03T10:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Eyal Edri</name>
    </author>
    <content type="html">&lt;p&gt;Today, when an oVirt developer pushes a patch to review on oVirt Gerrit, various validations are triggered in CI via the &lt;a href="http://ovirt-infra-docs.readthedocs.io/en/latest/CI/Build_and_test_standards.html"&gt;'check-patch'&lt;/a&gt; job, as defined by the project maintainers. Usually these jobs includes 'unit-tests', 'db tests', static analysis checks, and even an occasional 'functional test'. While it might seem that it covers alot and gives a good indication that the patch is good to be merged, unfortunately it is not always the case.&lt;/p&gt;

&lt;p&gt;The reason it's not enough lies in oVirt's complexity and the fact it's a Virtualization project, which means the only real way to know if your patch didn't break things is to install oVirt and try running a few basic commands, like 'adding host', 'adding vm', 'creating snapshots', and other tasks you can only do if you have a full oVirt system up and running. Here is where OST comes in!&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="ovirt-system-tests"&gt;oVirt System Tests&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://ovirt-system-tests.readthedocs.io"&gt;oVirt system tests&lt;/a&gt; is a testing framework written in Python, using 'python-nose' and oVirt Python SDK and runs on auto-generated VMs created by &lt;a href="http://lago.readthedocs.io"&gt;Lago&lt;/a&gt;. It is used by the oVirt CI to run post merge end-to-end testing that runs on a fully deployed oVirt environment and has been proven to detect multiple
regressions so far on merged commits from oVirt projects.&lt;/p&gt;

&lt;h2 id="the-current-status-and-why-it-is-never-enough"&gt;The Current Status (And Why it is Never Enough)&lt;/h2&gt;

&lt;p&gt;So you may ask yourself: if we have OST running after (almost) every merged commit, where is the problem? You might have guessed the answer which is already in the questionâ€“it's only 'AFTER', which means it's detected too late in the development cycle. The result of such breakage in CI means that any other developer using the same branch will now be blocked from working/verifying his patch because existing HEAD is broken, and usually it takes some time to either revert the offending patch or send a fix (and that's after the relevant people were found and started debugging the issue). On some occasions in the past, it even took a few days to see a fix merged. During that time, developers and testers were blocked, not an ideal status.&lt;/p&gt;

&lt;p&gt;Luckily, we now have a super easy way to avoid this!&lt;/p&gt;

&lt;h2 id="running-ost-on-open-patches-pre-merge"&gt;Running OST on Open Patches (Pre Merge)&lt;/h2&gt;

&lt;p&gt;I know you can't wait to hear about how to run OST on your patch, so I'll just jump into the TL;DR version, here is how you do it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Build RPMs from your open patch(es)&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Building RPMs today from any open oVirt patch is simple as just
  asking for it.. :)&lt;br /&gt;
  The new 'build-on-demand' option from oVirt Standard CI allows
  you to just type &lt;strong&gt;ci please build&lt;/strong&gt; in a comment on your patch
  and a new build will be triggered on the project 'build-on-demand' jobs.&lt;br /&gt;
  Once the 'build-on-demand' job finished building, write down the job URL,
  for e.g: &lt;a href="http://jenkins.ovirt.org/job/vdsm_master_build-artifacts-on-demand-el7-x86_64/9/"&gt;vdsm-master-build-on-demand&lt;/a&gt;.
  (btw, you can do this for as many oVirt projects you want and have a list of URLs).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Run the manual OST job with your custom RPMs&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Now that you have your custom RPMs ready, your JUST a click away from running OST
  on them.&lt;br /&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;Login to &lt;a href="http://jenkins.ovirt.org"&gt;Jenkins&lt;/a&gt; (make sure you have 'dev role' permissions, if not open a ticket to infra)&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Go to the &lt;a href="http://jenkins.ovirt.org/job/ovirt-system-tests_manual/"&gt;OST Manual job&lt;/a&gt; for your relevant version (usually master).&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Click on 'build with parameters' menu ( on the left side )&lt;/li&gt;
      &lt;li&gt;Now add all the URLs you have with the custom RPMs ( one per line ),for e.g &lt;a href="http://jenkins.ovirt.org/job/vdsm_master_build-artifacts-on-demand-el7-x86_64/9/"&gt;vdsm-build&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Click 'Build'&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Go get some coffee; Don't worry the job will send you an email once it is done ( on any status )&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This info can also be found on the &lt;a href="http://ovirt-system-tests.readthedocs.io/en/latest/CI/developers_info/"&gt;official OST documentation page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For more info or questions, please send email to infra@ovirt.org or lago-devel@ovirt.org if it is a lago-related question.&lt;/p&gt;

&lt;p&gt;Happy testing!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>CI Please Build&amp;mdash;How to build your oVirt project on-demand</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/12/ci-please-build.html"/>
    <id>http://ovirt.org/blog/2016/12/ci-please-build.html</id>
    <published>2016-12-20T10:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Eyal Edri</name>
    </author>
    <content type="html">&lt;p&gt;All projects in oVirt CI are built today post merge, using the 'build-artifacts' stage from &lt;a href="http://ovirt-infra-docs.readthedocs.io/en/latest/CI/Build_and_test_standards.html"&gt;oVirt's CI standards&lt;/a&gt;.
This ensures that all oVirt projects are built and deployed to oVirt repositories and can be consumed by CI jobs, developers or oVirt users.&lt;/p&gt;

&lt;p&gt;However, on some occasions a developer might need to build his project from an open patch.
Developers need this capability in order to to examine the effects of their changes on a full oVirt installation before merging those changes.
On some cases developers may even want to hand over packages based on un-merged patches to the QE team to verify that a given change will fix some complex issue or to preview a new feature on its early stages of development.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="the-current-build-option"&gt;The Current Build Option&lt;/h2&gt;

&lt;p&gt;Until now, to build rpms from a patch, a developer needed to use a custom &lt;a href="http://jenkins.ovirt.org/job/ovirt-engine_master_build-artifacts-el7-x86_64_build_from_patch/"&gt;Jenkins job&lt;/a&gt;, which was only available to ovirt-engine and only for master branch. Another option was to try and build it locally using standard CI 'mock runner.sh' script which will use the same configuration
as in CI. For full documentation on how to use 'mock-runner', checkout the &lt;a href="http://infra-docs.readthedocs.io/en/latest/CI/Build_and_test_standards.html#testing-the-scripts-locally"&gt;Standard CI&lt;/a&gt; page.&lt;/p&gt;

&lt;h2 id="the-new-build-option"&gt;The New Build Option&lt;/h2&gt;

&lt;p&gt;To ease and simplify the build from patch option, the oVirt infra team added a new feature to the &lt;a href="http://ovirt-infra-docs.readthedocs.io/en/latest/CI/Build_and_test_standards.html"&gt;oVirt's CI standards framework&lt;/a&gt; called 'build on demand'.&lt;/p&gt;

&lt;p&gt;It allows any oVirt developer to trigger a build from any open patch just by adding the comment 'ci please build' on the patch in Gerrit.
It will then trigger a 'build-artifacts-on-demand' job on jenkins which will build rpms from the patch, but not publish them to any repo.&lt;/p&gt;

&lt;h2 id="how-do-i-enable-it-for-my-ovirt-project-"&gt;How Do I Enable It For My oVirt Project ?&lt;/h2&gt;

&lt;p&gt;Enabling the 'build-on-demand' feature to an oVirt project is simple as adding a single line to the project standard yaml file, just add the following line to your 'build-artifacts' section, under 'jobs':&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  - '{project}_{version}_{stage}-on-demand-{distro}-{arch}'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a full example on how to send a patch for enabling it,
Checkout an example &lt;a href="https://gerrit.ovirt.org/#/c/68759/"&gt;Patch&lt;/a&gt; which adds on-demand builds to four different projects.&lt;/p&gt;

&lt;h2 id="what-else-can-i-do-with-it--hint-ost"&gt;What Else Can I Do With It ? (Hint: OST)&lt;/h2&gt;

&lt;p&gt;Maybe the most interesting and valuable thing you can do with the new feature, is to run the oVirt system tests suit on
the open patch (something that was possible only post merge until today, or required complex actions to do it manually).&lt;/p&gt;

&lt;p&gt;Running the OST suite with your newly created RPMs requires also just one line of code, here's how you do it:&lt;/p&gt;

&lt;p&gt;After the job you triggered finished running in Jenkins, use the Jenkins build URL you got (&lt;a href="http://jenkins.ovirt.org/job/vdsm_master_build-artifacts-on-demand-el7-x86_64/1/artifact/exported-artifacts/"&gt;Example&lt;/a&gt;)
as a parameter to to run OST on your laptop.
From the OST root dir, run the following to run basic master suite for e.g:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./run_suite.sh -s http://jenkins.ovirt.org/job/vdsm_master_build-artifacts-on-demand-el7-x86_64/1/artifact/exported-artifacts/ basic_suite_master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For more info and help on using this new feature, feel free to come and ask us on infra@ovirt.org.&lt;br /&gt;
For more info on oVirt system tests, checkout the &lt;a href="http://ovirt-system-tests.readthedocs.io"&gt;Project Documentation Page&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Happy Building!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Need for Speed&amp;mdash;Coming Changes in oVirt's CI Standards</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/12/the-need-for-speed.html"/>
    <id>http://ovirt.org/blog/2016/12/the-need-for-speed.html</id>
    <published>2016-12-08T15:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Barak Korren</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href="http://ovirt-infra-docs.readthedocs.io/en/latest/CI/Build_and_test_standards.html"&gt;oVirt's CI standards&lt;/a&gt; have been in use for a while in most oVirt projects and have largely been a success.&lt;/p&gt;

&lt;p&gt;These standards have put the control of what the CI system does in the hands of the developers without them
having to learn about &lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt; and the &lt;a href="http://docs.openstack.org/infra/jenkins-job-builder/index.html"&gt;tooling around it&lt;/a&gt;. The way the standards were implemented, with the &lt;a href="https://gerrit.ovirt.org/gitweb?p=jenkins.git;a=blob;f=mock_configs/mock_runner.sh"&gt;&lt;code&gt;mock_runner.sh&lt;/code&gt; script&lt;/a&gt;, also enabled developers to easily emulate the CI system on their own machines to debug and diagnose issues.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;From the oVirt infra team's point of view, the CI standards have removed the need to constantly maintain build dependencies on the Jenkins slaves and also eliminated most of the situations where jobs running on the same slave influenced one another.&lt;/p&gt;

&lt;p&gt;The CI standards implementation we have has one shortcoming, it is not particularity fast.&lt;/p&gt;

&lt;p&gt;We started seriously looking at this after one of the VDSM maintainers &lt;a href="https://lists.ovirt.org/pipermail/devel/2016-December/014386.html"&gt;reported&lt;/a&gt; that the &lt;code&gt;check_patch&lt;/code&gt; jobs for his project are running for far too long a time. In the end it turned out that a major reason for the delay was in the way the &lt;a href="https://gerrit.ovirt.org/#/c/67799/"&gt;tests themselves worked&lt;/a&gt;, but still, we looked at &lt;code&gt;mock_runner.sh&lt;/code&gt; and managed to speed it up quite a bit.&lt;/p&gt;

&lt;h2 id="what-did-we-change"&gt;What Did We Change?&lt;/h2&gt;

&lt;p&gt;Most of the time &lt;code&gt;mock_runner.sh&lt;/code&gt; spends when it isn't actually running the user's CI script, is spent setting up the &lt;a href="https://github.com/rpm-software-management/mock"&gt;&lt;code&gt;mock&lt;/code&gt;&lt;/a&gt; environment. It turns out that despite mock being able to cache mock environments, we were aggressively erasing the cache after each job invocation leading to the same environment having to be rebuilt.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gerrit.ovirt.org/#/c/67795/"&gt;The first change we implemented&lt;/a&gt; was simply to stop deleting the whole cache and instead only delete files that are older then two days.&lt;/p&gt;

&lt;p&gt;The CI standard allows developers to specify additional packages that would be available inside the mock environment. With the way &lt;code&gt;mock_runner.sh&lt;/code&gt; was implemented, those packages were installed in a way that prevented them from being included in the mock cache. This means they were newly installed every time a job was running.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://gerrit.ovirt.org/#/c/67801/"&gt;The second change we implemented&lt;/a&gt; was therefore to ensure those packages were saved to the mock cache as well.&lt;/p&gt;

&lt;h2 id="what-this-means-for-ovirt-developers"&gt;What This Means for oVirt Developers&lt;/h2&gt;

&lt;p&gt;The most noticeable aspect of the changes we've implemented (Besides the shorter job run times), is that while previously the mock environment was freshly installed with the latest packages for each CI job, now most jobs will use a cached mock environment that can be up to two days old.&lt;/p&gt;

&lt;p&gt;Most developers will probably not notice the change, but sometimes the most recent package are needed at all times. In that case there are two thinks developers can do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Specify the exact required version of the package in the CI standard &lt;code&gt;*.packages&lt;/code&gt; file.&lt;/li&gt;
  &lt;li&gt;Install the package explicitly with a &lt;code&gt;yum&lt;/code&gt; or a &lt;code&gt;dnf&lt;/code&gt; command from the CI standard script.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="bottom-line-how-much-faster-is-it"&gt;Bottom Line, How Much Faster Is It?&lt;/h2&gt;

&lt;p&gt;In our tests, by using the changes above, we managed to shorten the time to setup the mock environment from 2.5-3 minutes to around 20 seconds! That is a worthwhile change indeed.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;This blog post originally appeared on &lt;a href="https://ifireball.wordpress.com/2016/12/07/the-need-for-speed-coming-changes-in-ovirts-ci-standards/"&gt;Barak Korren's blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
