<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oVirt</title>
  <subtitle>Tag: Howto</subtitle>
  <id>http://ovirt.org/blog/</id>
  <link href="http://ovirt.org/blog/"/>
  <link href="http://ovirt.org/blog/tag/howto.xml" rel="self"/>
  <updated>2019-05-27T15:35:00+00:00</updated>
  <author>
    <name/>
  </author>
  <entry>
    <title>Integrating Kibana/Elasticsearch on Top of OpenShift with oVirt Engine SSO</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/05/openshift-openId-integration-with-engine-sso.html"/>
    <id>http://ovirt.org/blog/2017/05/openshift-openId-integration-with-engine-sso.html</id>
    <published>2017-05-16T12:35:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Ravi Nori</name>
    </author>
    <content type="html">&lt;p&gt;oVirt Engine provides a powerful way to manage users and domains using the oVirt Engine AAA extensions. oVirt Engine supports many different LDAP server types for authentication using the &lt;code&gt;ovirt-engine-extension-aaa-ldap&lt;/code&gt; extension and supports managing internal users using the &lt;code&gt;ovirt-engine-extension-aaa-jdbc&lt;/code&gt; extension. Clients can use the powerful oVirt Engine user management in their applications by using the OAuth2 or OpenId Connect end points provided by oVirt Engine SSO to authenticate users in their applications.&lt;/p&gt;

&lt;p&gt;Below is step-by-step instructions on how to integrate Kibana/Elasticsearch on top of OpenShift with oVirt Engine SSO. The instructions should work for any client application that can be configured to use a OAuth2 or OpenID Connect server to authenticate its users.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The goal is to integrate Kibana/Elasticsearch on top of OpenShift with oVirt Engine SSO, so existing engine users can access Kibana/Elasticsearch without reauthentication (we don't need to maintain authentication configuration separately for oVirt Engine and Kibana/Elasticsearch).&lt;/p&gt;

&lt;p&gt;The integration requires a fully working and configured oVirt Engine instance on oVirt Engine host and a fully working and configured instance of Kibana/Elasticsearch on top of OpenShift on the OpenShift host.&lt;/p&gt;

&lt;h2 id="installing-kibanaelasticsearch-and-openshift-backend"&gt;Installing Kibana/Elasticsearch and OpenShift Backend&lt;/h2&gt;

&lt;p&gt;Install Kibana/Elasticsearch/OpenShift on CentOS7 or RHEL 7.3 as described in https://www.ovirt.org/develop/release-management/features/metrics/setting-up-viaq-logging/&lt;/p&gt;

&lt;h2 id="installing-ovirt-engine"&gt;Installing oVirt Engine&lt;/h2&gt;

&lt;p&gt;Setup oVirt Engine on a separate host ovirt-engine.example.com as described in https://www.ovirt.org/download/&lt;/p&gt;

&lt;h2 id="setting-up-ovirt-engine-certificate-on-openshift-machine"&gt;Setting up oVirt Engine certificate on OpenShift machine&lt;/h2&gt;

&lt;p&gt;Get the oVirt Engine CA as described here https://www.ovirt.org/documentation/how-to/guest-console/connect-to-spice-console-without-portal/&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;scp root@&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;OVIRT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;:/etc/pki/ovirt-engine/ca.pem &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CA_FILE&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the certificate to system-wide trusted certificates. Copy the certificate to /etc/pki/ca-trust/source/anchors/ and run update-ca-trust&lt;/p&gt;

&lt;h2 id="register-a-new-sso-client-on-ovirt-engine-host"&gt;Register a New sso Client on ovirt-engine Host&lt;/h2&gt;

&lt;p&gt;Run the client registration tool ovirt-register-sso-client to register a new sso client. The tool will prompt the user to enter the client id, location of the client certificate (downloaded to oVirt Engine host) and the callback url prefix. Make note of the client id and client secret generated by the tool. The client id and client secret need to be entered in the master configuration file on the OpenShift host to configure authentication with oVirt Engine. The client registration tool is only available in oVirt Engine 4.2 and later.&lt;/p&gt;

&lt;h2 id="setup-oauthconfig-on-kibanaelasticsearchopenshift-host"&gt;Setup oauthconfig on Kibana/Elasticsearch/OpenShift Host&lt;/h2&gt;

&lt;p&gt;On Kibana/Elasticsearch/OpenShift host edit /etc/origin/master/master-config.yaml to setup oauthconfig as below. For oVirt Engine 4.1, see note below.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight yaml"&gt;&lt;code&gt;&lt;span class="na"&gt;oauthConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="na"&gt;assetPublicURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://openshift.example.com:8443/console/&lt;/span&gt;
  &lt;span class="na"&gt;grantConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;method&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;auto&lt;/span&gt;
  &lt;span class="na"&gt;identityProviders&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
  &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="na"&gt;challenge&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;login&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="no"&gt;true&lt;/span&gt;
    &lt;span class="na"&gt;mappingMethod&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;claim&lt;/span&gt;
    &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;my_openid_connect&lt;/span&gt;
    &lt;span class="na"&gt;provider&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="na"&gt;apiVersion&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;v1&lt;/span&gt;
      &lt;span class="na"&gt;kind&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;OpenIDIdentityProvider&lt;/span&gt;
      &lt;span class="na"&gt;clientID&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;client id specified in previous step&amp;gt;&lt;/span&gt;
      &lt;span class="na"&gt;clientSecret&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;lt;client id generated in previous step&amp;gt;&lt;/span&gt;
      &lt;span class="na"&gt;extraScopes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ovirt-app-api&lt;/span&gt;
      &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;ovirt-ext=auth:sequence-priority=~&lt;/span&gt;
      &lt;span class="na"&gt;extraAuthorizeParameters&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;include_granted_scopes&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;true"&lt;/span&gt;
&lt;span class="na"&gt;claims&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;custom_id_claim&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;sub&lt;/span&gt;
        &lt;span class="na"&gt;preferredUsername&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;preferred_username&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
        &lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;nickname&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;given_name&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;name&lt;/span&gt;
        &lt;span class="na"&gt;email&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;custom_email_claim&lt;/span&gt;
        &lt;span class="pi"&gt;-&lt;/span&gt; &lt;span class="s"&gt;email&lt;/span&gt;
      &lt;span class="na"&gt;urls&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
        &lt;span class="na"&gt;authorize&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://ovirt-engine.example.com/ovirt-engine/sso/openid/authorize&lt;/span&gt;
        &lt;span class="na"&gt;token&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://ovirt-engine.example.com/ovirt-engine/sso/openid/token&lt;/span&gt;
  &lt;span class="na"&gt;masterCA&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ca-bundle.crt&lt;/span&gt;
  &lt;span class="na"&gt;masterPublicURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://openshift.example.com:8443&lt;/span&gt;
  &lt;span class="na"&gt;masterURL&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;https://openshift.example.com:8443&lt;/span&gt;
  &lt;span class="na"&gt;sessionConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;sessionMaxAgeSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;3600&lt;/span&gt;
    &lt;span class="na"&gt;sessionName&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;ssn&lt;/span&gt;
    &lt;span class="na"&gt;sessionSecretsFile&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;/etc/origin/master/session-secrets.yaml&lt;/span&gt;
  &lt;span class="na"&gt;tokenConfig&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt;
    &lt;span class="na"&gt;accessTokenMaxAgeSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;86400&lt;/span&gt;
    &lt;span class="na"&gt;authorizeTokenMaxAgeSeconds&lt;/span&gt;&lt;span class="pi"&gt;:&lt;/span&gt; &lt;span class="s"&gt;500&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In oVirt engine 4.1 the authorize and token endpoints point to oauth endpoints.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;      urls:
        authorize: https://ovirt-engine.example.com/ovirt-engine/sso/oauth/authorize
        token: https://ovirt-engine.example.com/ovirt-engine/sso/oauth/token
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="restart-ovirt-engine"&gt;Restart oVirt Engine&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl restart ovirt-engine
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="restart-origin-master-and-origin-node-on-openshift-host"&gt;Restart origin-master and origin-node on OpenShift Host&lt;/h2&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl restart origin-master
systemctl restart origin-node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="configure-hostnames"&gt;Configure hostnames&lt;/h2&gt;

&lt;p&gt;Make sure the hosts are reachable by their hostnames if required add host aliases in /etc/hosts&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight conf"&gt;&lt;code&gt;&lt;span class="m"&gt;10&lt;/span&gt;.&lt;span class="m"&gt;16&lt;/span&gt;.&lt;span class="m"&gt;19&lt;/span&gt;.&lt;span class="m"&gt;48&lt;/span&gt; &lt;span class="n"&gt;openshift&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="n"&gt;kibana&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt; &lt;span class="n"&gt;mux&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;

&lt;span class="m"&gt;10&lt;/span&gt;.&lt;span class="m"&gt;10&lt;/span&gt;.&lt;span class="m"&gt;116&lt;/span&gt;.&lt;span class="m"&gt;110&lt;/span&gt; &lt;span class="n"&gt;ovirtengine&lt;/span&gt;.&lt;span class="n"&gt;example&lt;/span&gt;.&lt;span class="n"&gt;com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="grant-permissions"&gt;Grant Permissions&lt;/h2&gt;

&lt;p&gt;The user needs to be granted permissions manually in OpenShift, using the console UI or the command line, so that the user can view the data in Kibana. Accessing https://kibana.example.com should redirect to the engine login page. Enter credentials and login will redirect user back to Kibana.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using oVirt and Vagrant</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/02/using-oVirt-vagrant.html"/>
    <id>http://ovirt.org/blog/2017/02/using-oVirt-vagrant.html</id>
    <published>2017-02-10T21:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Marc Young</name>
    </author>
    <content type="html">&lt;p&gt;Introducing oVirt virtual machine management via Vagrant.&lt;/p&gt;

&lt;p&gt;In this short tutorial I'm going to give a brief introduction on how to use &lt;a href="http://vagrantup.com"&gt;vagrant&lt;/a&gt; to manage oVirt with the new &lt;a href="http://www.github.com/myoung34/vagrant-ovirt4"&gt;community developed oVirt v4 Vagrant provider&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="background"&gt;Background&lt;/h2&gt;

&lt;p&gt;Vagrant is a way to tool to create portable and reproducible environments. We can use it to provision and manage virtual machines in oVirt by managing a base box (small enough to fit in github as an artifact) and a Vagrantfile. The Vagrantfile is the piece of configuration that defines everything about the virtual machines: memory, cpu, base image, and any other configuration that is specific to the hosting environment.&lt;/p&gt;

&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;A fully working and configured oVirt cluster of any size&lt;/li&gt;
  &lt;li&gt;A system capable of compiling and running the &lt;a href="http://github.com/ovirt/ovirt-engine-sdk-ruby"&gt;oVirt ruby SDK gem&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vagrant 1.8 or later&lt;/li&gt;
  &lt;li&gt;The oVirt vagrant plugin installed via &lt;code&gt;$ vagrant plugin install vagrant-ovirt4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="the-vagrantfile"&gt;The Vagrantfile&lt;/h2&gt;

&lt;p&gt;To start off, I'm going to use this Vagrantfile:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'ovirt4'&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"test-vm"&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;box_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/myoung34/vagrant-ovirt4/blob/master/example_box/dummy.box?raw=true'&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;network&lt;/span&gt; &lt;span class="ss"&gt;:private_network&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:ip&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'192.168.56.100'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:nictype&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'virtio'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:netmask&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'255.255.255.0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#normal network configuration&lt;/span&gt;
    &lt;span class="ss"&gt;:ovirt__ip&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'192.168.2.198'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ovirt__network_name&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'ovirtmgmt'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:ovirt__gateway&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'192.168.2.125'&lt;/span&gt; &lt;span class="c1"&gt;# oVirt specific information, overwrites previous on oVirt provider&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provider&lt;/span&gt; &lt;span class="ss"&gt;:ovirt4&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://ovirt/ovirt-engine/api'&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"admin@internal"&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"mypassword"&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insecure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cluster&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'Default'&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'vagrant-centos7'&lt;/span&gt;
    &lt;span class="n"&gt;ovirt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;console&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'vnc'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the configuration file, there are some pieces on which to elaborate. The URL, password, and username should be self-explanatory. The &lt;code&gt;config.vm.network&lt;/code&gt; block has some special mappings (prefixed by &lt;code&gt;ovirt__&lt;/code&gt;) so that it can be used in any provider, as well as oVirt. Vagrantfiles can manage lifecycles across providers, which is why the oVirt-specific mappings are in a &lt;code&gt;config.vm.provider :ovirt4&lt;/code&gt; configuration block as well.&lt;/p&gt;

&lt;p&gt;Within our &lt;code&gt;ovirt4&lt;/code&gt; configuration section, we have set SSL verify to off (to allow self-signed certificates), the cluster is set to &lt;code&gt;Default&lt;/code&gt; (and available in the oVirt UI), and the template to use as a starting point is &lt;code&gt;vagrant-centos7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The base template will need to be created per your environment, but a starting helper script for redhat based distributions such as CentOS &lt;a href="https://github.com/myoung34/vagrant-ovirt4/blob/master/tools/prepare_redhat_for_box.sh"&gt;is available here&lt;/a&gt;. It basically installs some base packages like the oVirt agent but also sets up a local user &lt;code&gt;vagrant&lt;/code&gt; inside the VM that is required to proceed. Please read through it carefully.&lt;/p&gt;

&lt;h2 id="getting-to-it"&gt;Getting to it&lt;/h2&gt;

&lt;p&gt;In the directory where the &lt;code&gt;Vagrantfile&lt;/code&gt; lives, we can create and start a VM.&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant up
Bringing machine &lt;span class="s1"&gt;'default'&lt;/span&gt; up with &lt;span class="s1"&gt;'ovirt4'&lt;/span&gt; provider...
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Creating VM with the following settings...
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default:  &lt;span class="nt"&gt;--&lt;/span&gt; Name:          test-vm
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default:  &lt;span class="nt"&gt;--&lt;/span&gt; Cluster:       Default
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default:  &lt;span class="nt"&gt;--&lt;/span&gt; Template:      vagrant-centos7
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default:  &lt;span class="nt"&gt;--&lt;/span&gt; Console Type:  vnc
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Waiting &lt;span class="k"&gt;for &lt;/span&gt;VM to become &lt;span class="s2"&gt;"ready"&lt;/span&gt; to start...
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Starting VM.
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Waiting &lt;span class="k"&gt;for &lt;/span&gt;VM to get an IP address...
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Machine is booted and ready &lt;span class="k"&gt;for &lt;/span&gt;use!
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Rsyncing folder: /home/vagrant/ &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; /vagrant
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Setting hostname...
    default:
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair &lt;span class="k"&gt;for &lt;/span&gt;better security.
    default:
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest &lt;span class="k"&gt;if &lt;/span&gt;it&lt;span class="s1"&gt;'s present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you look in oVirt we now have a virtual machine named &lt;code&gt;test-vm&lt;/code&gt; running.&lt;/p&gt;

&lt;p&gt;&lt;img alt="vagrant vm listed" width="2042" height="792" src="/images/vagrant-ovirt-up-1.png?1560777613" /&gt;&lt;/p&gt;

&lt;p&gt;We can do things such as manage snapshots:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant snapshot list
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Retrieving list of snapshots...
id     description     date

&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant snapshot save somename
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Creating snapshot...

&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant snapshot list
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Retrieving list of snapshots...
                                  id     description                          date
3dd34cbf-4698-446f-82bb-00ac66931411        somename     2017-02-10T05:34:53-06:00

&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant snapshot delete 3dd34cbf-4698-446f-82bb-00ac66931411
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Deleting snapshot...

&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant snapshot list
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Retrieving list of snapshots...
id     description     date
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can SSH into the box or run commands via SSH:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh
Last login: Wed Feb  8 21:27:23 2017 from marc-pc

&lt;span class="nv"&gt;$ &lt;/span&gt;hostname
test-vm
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;logout
&lt;/span&gt;Connection to 192.168.2.238 closed.

&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'hostname; whoami'&lt;/span&gt;
test-vm
vagrant
Connection to 192.168.2.238 closed.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also run &lt;a href="https://www.vagrantup.com/docs/provisioning/"&gt;provisioners&lt;/a&gt; against the machine. Add this to your Vagrantfile:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;vm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;"shell"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;inline: &lt;/span&gt;&lt;span class="s2"&gt;"whoami &amp;gt;&amp;gt; /home/vagrant/somefile"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let's see what happens when we use it:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant provision
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Rsyncing folder: /home/vagrant/ &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; /vagrant
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Running provisioner: shell...
    default: Running: inline script

&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant ssh &lt;span class="nt"&gt;-c&lt;/span&gt; &lt;span class="s1"&gt;'cat ~/somefile'&lt;/span&gt;
root
Connection to 192.168.2.238 closed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lastly, we can tear down the VM and all of its artifacts:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vagrant destroy &lt;span class="nt"&gt;-f&lt;/span&gt;
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Halting VM...
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Waiting &lt;span class="k"&gt;for &lt;/span&gt;VM to shutdown...
&lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; default: Removing VM...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>oVirt Community Newsletter December 2016</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/01/oVirt-December-2016-newsletter.html"/>
    <id>http://ovirt.org/blog/2017/01/oVirt-December-2016-newsletter.html</id>
    <published>2017-01-19T21:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Brian Proffitt</name>
    </author>
    <content type="html">&lt;p&gt;It's a new year with new opportunities for oVirt to show up its virtualization features! We're getting ready for DevConf.CZ in Brno next week, and FOSDEM in Brussels the week after that! We look forward to meeting European developers and sysadmins to share your experiences!&lt;/p&gt;

&lt;p&gt;Here's what happened in December of 2016.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id="software-releases"&gt;Software Releases&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOI9cY"&gt;oVirt 4.0.6 Release is now available&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="in-the-community"&gt;In the Community&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOLCrW"&gt;Happy New Documentation!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iONDUR"&gt;oVirt System Tests to the Rescue!—How to Run End-to-End oVirt Tests on Your Patch&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOTAkD"&gt;CI Please Build—How to build your oVirt project on-demand&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOPUzf"&gt;The Need for Speed—Coming Changes in oVirt's CI Standards&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOPARp"&gt;Еxtension of iptables Rules on oVirt 4.0 Hosts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOKeW6"&gt;New oVirt Project Underway&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="deep-dives-and-technical-discussions"&gt;Deep Dives and Technical Discussions&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOILiD"&gt;KVM/Linux Nested Virtualization Support For ARM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOWDtj"&gt;Virtual Machines in Kubernetes? How and what makes sense?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iORd1j"&gt;ANNOUNCE: New libvirt project Go XML parser model&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOOEwc"&gt;Using OVN with KVM and Libvirt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iP0ne5"&gt;New libvirt project Go language bindings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOVilZ"&gt;CI tools testing lab: Making it do useful work&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOOBRa"&gt;CI tools testing lab: Integrating Jenkins and adding Zuul UI&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOP1a8"&gt;CI tools testing lab: Adding Zuul Merger&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOUZYn"&gt;CI tools testing lab: Setting up Zuul Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iP0CG1"&gt;CI tools testing lab: Adding Gerrit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://bit.ly/2iOSvtc"&gt;CI tools testing lab: Initial setup with Jenkins&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="downstream-news"&gt;Downstream News&lt;/h2&gt;

&lt;p&gt;&lt;a href="http://red.ht/2jvB5mf"&gt;Debugging a kernel in QEMU/libvirt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://red.ht/2iLW5YU"&gt;Five Reasons to Switch from vSphere to Red Hat Virtualization&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://red.ht/2hW9N7B"&gt;Red Hat scoops Best Virtualization Product at the V3 Technology Awards 2016&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Happy New Documentation!</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/01/happy-new-documentation.html"/>
    <id>http://ovirt.org/blog/2017/01/happy-new-documentation.html</id>
    <published>2017-01-16T14:55:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Brian Proffitt</name>
    </author>
    <content type="html">&lt;p&gt;The oVirt Project is pleased to announce the availability of &lt;a href="/documentation/"&gt;all-new principal documentation&lt;/a&gt; for the oVirt 4.0 branch.&lt;/p&gt;

&lt;p&gt;There are many people out there who are content to use software without documentation, preferring to muddle through the software based on past experience with similar software or just the desire to put the software through its paces.&lt;/p&gt;

&lt;p&gt;We all do this; I could not tell you the last time I looked at documentation for Firefox or Chrome, because I've been using browsers for over 20 years and seriously, what else is there to learn? Until I learn about a cool new feature from a friend or a web site.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;In a software community project, one of the biggest things a community must do is to provide proper onboarding to the project's result. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Explaining what the software is&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Providing a clear path to getting the software&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Demonstrating how to use the software&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All three of these onboarding requirements must be done right in order for onboarding to work successfully. Documenation, then, fulfills the third requirement: showing how software can be used. Not every one will need it, but for those users who do need it, it is very nice to have.&lt;/p&gt;

&lt;p&gt;To that end, the oVirt Project has, with the help of the Red Hat Content Services team, created a new and complete set of &lt;a href="/documentation/"&gt;documentation&lt;/a&gt; based on the downstream documentation for Red Hat Virtualization 4.0.&lt;/p&gt;

&lt;p&gt;You may be thinking that this is a backwards process. Shouldn't the upstream documentation be the basis of the downstream? And you would be right… normally that is how the flow of documentation, like code, goes. But the upstream documentation for oVirt has been incomplete and sadly out of sync for quite some time, so it was though that "bootstrapping" the downstream docs as a reset would be a good place to start.&lt;/p&gt;

&lt;p&gt;Even these guides themselves are incomplete. Downstream references have been removed, but some still remain. And, since the feature set for oVirt is always a bit larger than its downstream products, there are sure to be features that have yet to be described. This is where, we hope, you come in.&lt;/p&gt;

&lt;p&gt;Now that there is a strong base of documentation with which to work, we hope you will visit the oVirt site's &lt;a href="https://github.com/oVirt/ovirt-site"&gt;GitHub repo&lt;/a&gt; and submit changes and additions as needed. In this way, the documention will be a living, breathing document that will not only provide oVirt users and admins a great reference, but also be the starting point for the multiple downstream products that use oVirt as their base.&lt;/p&gt;

&lt;p&gt;The principal documentation includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/quickstart/quickstart-guide/"&gt;Quick Start Guide&lt;/a&gt;.&lt;/strong&gt; This document is a step-by-step guide for first-time users to install and configure a basic oVirt environment and create virtual machines.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/install-guide/Installation_Guide"&gt;oVirt Installation Guide&lt;/a&gt;.&lt;/strong&gt; The installation and configuration of an oVirt Engine, the installation and configuration of hosts and attaching existing FCP storage to your oVirt environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/upgrade-guide/upgrade-guide"&gt;oVirt Upgrade Guide&lt;/a&gt;.&lt;/strong&gt; This guide covers updating your oVirt environment between minor releases, and upgrading to the next major version.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/admin-guide/administration-guide/"&gt;oVirt Administration Guide&lt;/a&gt;.&lt;/strong&gt; A master guide to administering an oVirt environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/vmm-guide/Virtual_Machine_Management_Guide"&gt;oVirt Virtual Machine Management Guide&lt;/a&gt;.&lt;/strong&gt; Most virtual machine tasks in oVirt can be performed in both the User Portal and Administration Portal. However, the user interface differs between each portal, and some administrative tasks require access to the Administration Portal. Tasks that can only be performed in the Administration Portal will be described as such in this guide.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/intro-admin/Introduction_to_the_Administration_Portal"&gt;oVirt Introduction to the Administration Portal&lt;/a&gt;.&lt;/strong&gt; A straightforward howto for the Administration portal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/intro-user/Introduction_to_the_User_Portal"&gt;oVirt Introduction to the User Portal&lt;/a&gt;.&lt;/strong&gt; A straightforward howto for the User portal.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/self-hosted/Self-Hosted_Engine_Guide"&gt;oVirt Self-Hosted Engine Guide&lt;/a&gt;.&lt;/strong&gt; A self-hosted engine is a virtualized environment in which the oVirt Engine runs on a virtual machine on the hosts managed by that engine. The virtual machine is created as part of the host configuration, and the Engine is installed and configured in parallel to the host configuration process. This guide will walk you through how to setup and run this feature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;&lt;a href="/documentation/data-warehouse/Data_Warehouse_Guide"&gt;oVirt Data Warehouse Guide&lt;/a&gt;.&lt;/strong&gt; The oVirt Engine includes a comprehensive management history database, which can be utilized by any application to extract a range of information at the data center, cluster, and host levels. Installing Data Warehouse creates the ovirt_engine_history database, to which the Engine is configured to log information for reporting purposes. The Data Warehouse component is optional, but if you want to use it, this guide will help.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The oVirt Project would specifically like to thank Derek Cadzow of Content Services and Shaun McCance of the Open Source and Standards teams for their invaluable assistance on this bootstrapping project! We hope you find this documentation useful and welcome any and all feedback as part of the ongoing efforts to make our onboarding process strong.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>oVirt Software Defined Networking, The OVN Network Provider</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/11/ovirt-provider-ovn.html"/>
    <id>http://ovirt.org/blog/2016/11/ovirt-provider-ovn.html</id>
    <published>2016-11-02T17:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Marcin Mirecki</name>
    </author>
    <content type="html">&lt;p&gt;oVirt offers not only its own internal networking, but also an API for external network providers. This API enables using external network management software inside environments managed by oVirt and takes advantage of their extended capabilities.
One of such solutions is OVN: Open Virtual Network. OVN is an OVS (Open vSwitch) extension that brings Software Defined Networking to &lt;a href="http://openvswitch.github.io/support/dist-docs/README.rst.html"&gt;OVS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OVN enables support for virtual networks abstraction by adding native OVS support for virtual L2 and L3 overlays.
This allows the user to create as many VM networks as required, without troubling the adminstrator with vlan requests or infrastructure changes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The oVirt provider for OVN consists of two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The oVirt OVN driver&lt;/li&gt;
  &lt;li&gt;The oVirt OVN provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="ovirt-ovn-driver"&gt;oVirt OVN Driver&lt;/h2&gt;

&lt;p&gt;The oVirt OVN driver is the Virtual Interface Driver placed on oVirt hosts that handle the wiring of VM NICs to OVN networking.&lt;/p&gt;

&lt;p&gt;The driver allows Vdsm, libvirt, and OVN to interact whenever a NIC is plugged in such a way that the VM NIC is added to an appropriate OVN Logical Switch and the appropriate OVN overlays on all the hosts in the oVirt environment.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-driver-1.0-1.fc24.noarch.rpm"&gt;oVirt OVN driver rpm&lt;/a&gt; is now available for testing. The latest version can always be downloaded and built from the repository (described later in this article). Once the rpm is downloaded, it can be installed in the following way:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install ovirt-provider-ovn-driver-1.0-1.fc24.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OVN requires Vdsm and OVN (version 2.6 or later) to be installed on the host. The following OVN packages are required by the ovirt-provider-ovn-driver rpm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;openvswitch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-common&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-host&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;python-openvswitch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are available from the &lt;a href="http://openvswitch.org/download/"&gt;OVS website&lt;/a&gt; or built using the code downloaded from the OVS repo (described below).&lt;/p&gt;

&lt;p&gt;The OVN-controller service can be started using the following command:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl start ovn-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make the service start automatically at boot, the service could be enabled using:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl enable ovn-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing the driver and OVN, the OVN-controller must be configured. This can be done either using the vdsm-tool:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vdsm-tool ovn-config &amp;lt;OVN central server IP&amp;gt; &amp;lt;local IP used for OVN tunneling&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second parameter (local IP used for OVN tunneling) can be the IP address of the ovirtmgmt interface on the host, and should be reachable by OVN hosts and central server.
vdsm-tool will also configure ovn-controller with the PKI required to safely connect to the ovn central server.
To add support for Transport Layer Security (TLS) connectivity with the OVN-controller, vdsm-tool will use the VDSM private and public keys, and configures OVN-controller to enable PKI encryption between the host and the OVN south db on the OVN central server. This provides privacy and data-integrity in the management connections to the south database&lt;/p&gt;

&lt;p&gt;The OVN-controller can also be set up by using the OVN command-line interface directly. For more information about OVN-controller setup, please check the
&lt;a href="http://openvswitch.org/support/dist-docs/"&gt;OVS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The command above should create OVN tunnels to other OVN controllers (if at least one other ovn-controller is present).
Please verify that the tunnel has been created by issuing the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ip link&lt;/code&gt; - the result should include a link called &lt;code&gt;genev_sys_ ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ovs-vsctl show&lt;/code&gt; - the bridge &lt;code&gt;br-int&lt;/code&gt; should include a port looking somewhat like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Port "ovn-6b2d2f-0"
   Interface "ovn-6b2d2f-0"
        type: geneve
        options: {csum="true", key=flow, remote_ip="10.35.128.14"}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please check the OVN logs in case of problems. The relevant OVN logs are located in &lt;code&gt;/var/log/openvswitch/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="ovirt-ovn-provider"&gt;oVirt OVN Provider&lt;/h2&gt;

&lt;p&gt;The oVirt OVN provider is a proxy that the oVirt Engine uses to interact with OVN. It is delivered as an rpm that is to be installed on the host where OVN central is installed.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-1.0-1.fc24.noarch.rpm"&gt;oVirt OVN provider RPM&lt;/a&gt; is also available now. The latest version can always be downloaded and built from the repository as well. Once the rpm is downloaded, it can be installed with this command:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install ovirt-provider-ovn-1.0-1.fc24.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OVN requires OVN to be installed on the host (version 2.6 or later).
The OVN provider requires the following OVS and OVN packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;openvswitch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-common&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-central&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;python-openvswitch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are also available from the &lt;a href="http://openvswitch.org/download/"&gt;OVS website&lt;/a&gt; or built using the code downloaded from the OVS repo (described below).&lt;/p&gt;

&lt;p&gt;After installing the oVirt OVN provider, the admin needs to open up port 9696 in the firewall.
This can be done manually or by adding the ovirt-provider-ovn firewalld service to the appropriate firewalld zone with:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firewall-cmd --zone=&amp;lt;zone to add service to&amp;gt; --add-service=ovirt-provider-ovn --permanent
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The zone currently selected as default can be obtained by executing:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firewall-cmd --get-default-zone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firewalld also needs to be configured for OVN components. This will be handled by OVN in the near future (https://bugzilla.redhat.com/1390938).
In the mean time the following commands open the required ports on the OVN central server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" port protocol="tcp" port="6641" accept'

firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" port protocol="tcp" port="6642" accept'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stop iptables on the hosts (needed for OVN tunnels):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl stop iptables
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installation, the provider can be started as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl start ovirt-provider-ovn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable the service in order to make it start at boot, use:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl enable ovirt-provider-ovn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since OVS 2.7, OVN central must be configured to listen to requests on appropriate ports:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovn-sbctl set-connection ptcp:6642
ovn-nbctl set-connection ptcp:6641
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The provider can then be added to oVirt as an external network provider. In order to add a new provider, go to the External Providers section in the oVirt UI and click the Add button.&lt;/p&gt;

&lt;p&gt;&lt;img alt="adding a new provider" width="749" height="482" src="/images/new-ovirt-provider-ovn.png?1560777613" /&gt;&lt;/p&gt;

&lt;p&gt;When the provider is successfully added, existing OVN networks can be imported to oVirt.
New OVN networks can be defined using oVirt by adding a network and specifying it to be added on an external provider (make sure you add the external provider in read-write mode, so that you can add external networks from oVirt).&lt;/p&gt;

&lt;p&gt;A vNIC can be attached to OVN network by simply choosing an external network during NIC provisioning.&lt;/p&gt;

&lt;p&gt;OVN based networking brings many advantages to oVirt:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;More granular security - it brings complete network isolation without the need for defining VLANs.&lt;/li&gt;
  &lt;li&gt;Easier management - the management of the networking infrastructure should also become much easier, as instead of managing the network isolation on each of the networking components, it will be automatically taken care of by OVN.&lt;/li&gt;
  &lt;li&gt;Self service - the user can create many VM networks without troubling the network admin with vlan or infrastructure requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="building-ovirt-ovn-provider-rpms-from-repository"&gt;Building oVirt OVN Provider rpms from repository&lt;/h2&gt;

&lt;p&gt;Clone the repository:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://gerrit.ovirt.org/ovirt-provider-ovn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the rpms:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ovirt-provider-ovn
make rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The built rpms can be found in: &lt;code&gt;~/rpmbuild/RPMS/noarch/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="building-ovn-rpms-from-repository"&gt;Building OVN rpms from repository&lt;/h2&gt;

&lt;p&gt;Note: for the most up-to-date description of building OVS resources please refer to &lt;a href="http://openvswitch.org"&gt;the OVS site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clone the repository:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/openvswitch/ovs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install the following packages, as they are need to build ovn:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum -y install gcc make python-devel openssl-devel kernel-devel graphviz kernel-debug-devel autoconf automake rpm-build redhat-rpm-config rpm-build rpmdevtools bash-completion autoconf automake libtool PyQt4 groff libcap-ng-devel python-twisted-core python-zope-interface graphviz openssl-devel selinux-policy-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the ovn rpms:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ovs
./boot.sh
./configure
make dist
cp openvswitch-&amp;lt;version&amp;gt;.tar.gz $HOME/rpmbuild/SOURCES
cd $HOME/rpmbuild/SOURCES
tar xzf openvswitch-&amp;lt;version&amp;gt;.tar.gz
cd openvswitch-&amp;lt;version&amp;gt;
rpmbuild -bb rhel/openvswitch-fedora.spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The built rpms will reside here: &lt;code&gt;~/rpmbuild/RPMS/x86_64/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="provider-setup-using-the-engine-setup-script"&gt;Provider setup using the engine-setup script&lt;/h2&gt;

&lt;p&gt;The provider can be set up on the engine host using the engine-setup tool.
The engine-setup tool is part of oVirt engine installation and is located in:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/engine-setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During the setup process, engine-setup script will ask the user several questions related to OVN:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Install ovirt-provider-ovn(Yes, No) [Yes]?:&lt;/code&gt;
If 'Yes', engine-setup will install ovirt-provider-ovn.
If engine-setup is used to update a system, this will only be asked if ovirt-provider-ovn has not been installed previously.
If you reply 'No', you will not be asked again on the next run of engine-setup. If you do want to get asked again, run engine-setup with '–reconfigure-optional-components'.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Use default credentials (admin@internal) for ovirt-provider-ovn(Yes, No) [Yes]?:&lt;/code&gt;
If 'Yes', engine-setup will use the default engine user and password specified earlier in the setup process.
This option is only available during new installations.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;oVirt OVN provider user[admin]:&lt;/code&gt;
 If the default credentials are not chosen, the user name which to use to connect to the provider.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;oVirt OVN provider password[empty]:&lt;/code&gt;
 If the default credentials are not chosen, the password to use to connect to the provider.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If used to set up ovirt-provider-ovn, engine-setup will perform the following tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install OVS and OVN packages on the engine&lt;/li&gt;
  &lt;li&gt;install ovirt-provider-ovn on the engine&lt;/li&gt;
  &lt;li&gt;add and configure a default External Network OVN provider. The engine provider will be configured to connect to provider on localhost. The provider will also be configured with the user and password specified during the setup process.&lt;/li&gt;
  &lt;li&gt;generate the PKI (public key infrastructure) for OVN north db, OVN southdb and ovirt-provider-ovn (shared key for serving https and comunicating with OVN north db)&lt;/li&gt;
  &lt;li&gt;configure the OVN north and south databases to use SSL&lt;/li&gt;
  &lt;li&gt;configure the provider to use https&lt;/li&gt;
  &lt;li&gt;configure the provider to connect to OVN north DB using SSL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="configuring-pki-manually"&gt;Configuring PKI manually&lt;/h3&gt;

&lt;p&gt;The PKI (public key infrastructure) for the provider and driver are configured automatically by engine-setup and vdsm-tool.
In case where the provider is not installed together with ovirt-engine, PKI will need to be created and configured manually.&lt;/p&gt;

&lt;p&gt;In such a case, key/certificate pair signed by a common authority will be needed for the provider, ovn north db, ovn south db, and each of the ovn controllers.&lt;/p&gt;

&lt;p&gt;Some of the possible ways to generate key/certificate pairs are using &lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt; or openvswitch &lt;a href="http://openvswitch.org/support/dist-docs/ovs-pki.8.txt"&gt;ovs-pki command&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ovn north db must be configured using the following commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovn-nbctl set-ssl &amp;lt;private key file&amp;gt; &amp;lt;certificate file&amp;gt; &amp;lt;ca certificate file&amp;gt;
ovn-nbctl set-connection pssl:6641
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The ovn south db must be configured using the following commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovn-sbctl set-ssl &amp;lt;private key file&amp;gt; &amp;lt;certificate file&amp;gt; &amp;lt;ca certificate file&amp;gt;
ovn-sbctl set-connection pssl:6642
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The provider must be configured by setting the follwing values in the configuration file (/etc/ovirt-provider-ovn/ovirt-provider-ovn.conf):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[SSL]
ssl_enabled=true # enables/disables https for the REST API
key-file=&amp;lt;private key file&amp;gt;
cert-file=&amp;lt;certificate file&amp;gt;
cacert-file=&amp;lt;ca certificate file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The PKI of the provider will be used to connect to the OVN north db, as well as for the https connection.
The CA certificate must used for signing the certificate must be added to the external provider trust store on the engine:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;keytool -import -alias &amp;lt;certificate alias&amp;gt; -keystore &amp;lt;key store file&amp;gt; -file &amp;lt;ca certificate file&amp;gt; -noprompt -storepass &amp;lt;store password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key store file and the store password are defined in &lt;code&gt;/usr/share/ovirt-engine/services/ovirt-engine/ovirt-engine.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ovn-controller can be set up using the &lt;code&gt;setup_ovn_controller&lt;/code&gt; script (/usr/libexec/ovirt-provider-ovn/setup_ovn_controller.sh):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setup_ovn_controller.sh &amp;lt;OVN central IP&amp;gt; &amp;lt;local tunneling IP&amp;gt; &amp;lt;private key file&amp;gt; &amp;lt;certificate file&amp;gt; &amp;lt;ca certificate file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="tested-environments"&gt;Tested environments&lt;/h2&gt;

&lt;p&gt;This guide has been tested on both Fedora24 and RHEL7 environments.&lt;/p&gt;

&lt;p&gt;Note: Currently a OVS spec file for Fedora is the only available in the OVS repo. We are however using the generated rpm's on RHEL7 and have not encountered any problems so far. Please consult the OVS team for more info.&lt;/p&gt;

&lt;h2 id="useful-links"&gt;Useful Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-1.0-1.fc24.noarch.rpm"&gt;ovirt-provider-ovn RPM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-driver-1.0-1.fc24.noarch.rpm"&gt;ovirt-provider-ovn-driver RPMy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://jenkins.ovirt.org/job/ovirt-provider-ovn_master_build-artifacts-el7-x86_64/lastSuccessfulBuild/artifact/exported-artifacts/"&gt;Latest development build&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://gerrit.ovirt.org/#/q/project:ovirt-provider-ovn"&gt;Project repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.ovirt.org/develop/release-management/features/ovirt-ovn-provider/"&gt;oVirt provider for OVN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://www.ovirt.org/develop/release-management/features/external-network-provider/"&gt;External network providers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="http://openvswitch.org/support/dist-docs/"&gt;OVS ducumentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://openvswitch.org/support/dist-docs/ovn-architecture.7.html"&gt;OVN architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>Modifying oVirt-Generated ifcfg Files</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/05/modify-ifcfg-files.html"/>
    <id>http://ovirt.org/blog/2016/05/modify-ifcfg-files.html</id>
    <published>2016-05-25T14:21:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Marcin Mirecki</name>
    </author>
    <content type="html">&lt;p&gt;oVirt is using a bridge based setup to configure networks on the managed hosts. The setup process is done by generating and maintaining network interface configuration files (ifcfg file), which define the network devices used by oVirt.
Should any changes be done to these files by an outside party, oVirt will try to restore them to the desired state, to keep the network configuration intact.
There are however situations in which the user want to intentionally introduce permanent changes into some of these files, and prohibit oVirt from overwritting them. In order to do so, VDSM hook script can be used.&lt;/p&gt;

&lt;p&gt;Lets look at an example, where the user want to add the following entries to the 'ens11' network interface:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USERCTL=yes
ETHTOOL_OPTS="autoneg on speed 1000 duplex full"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A VDSM hook invoked before ifcfg file modification can be used to accomplish this.
The hook script should be placed inside the "/usr/libexec/vdsm/hooks/before_ifcfg_write/" directory on the VDSM host. VDSM must have execute permissions for this script. VDSM will check this directory every time ifcfg configuration is changed, and executes each script it finds in this directory.
The script will receive a json dictionary as input. The dictionary contains two elements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ifcfg_file - full path of the ifcfg file to be written&lt;/li&gt;
  &lt;li&gt;config - the contents of the ifcfg file to be written&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "config": "DEVICE=ens13\nHWADDR=52:54:00:d1:3d:c8\nBRIDGE=z\nONBOOT=yes\nMTU=1500\nNM_CONTROLLED=no\nIPV6INIT=no\n",
    "ifcfg_file": "/etc/sysconfig/network-scripts/ifcfg-ens7"
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modified ifcfg file contents (under the "config" entry) can be returned,and will be used by VDSM as the new ifcfg file content. If nothing is returned, VDSM will use the unmodified content.&lt;/p&gt;

&lt;p&gt;A sample hook script will look as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hooking&lt;/span&gt;

&lt;span class="n"&gt;hook_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hooking&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ifcfg_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ifcfg_file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'config'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# adding to ens11 ifcfg file: USERCTL=yes and ETHTOOL_OPTS="autoneg on speed 1000 duplex full"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'ens11'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ifcfg_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config_data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"USERCTL=yes&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;ETHTOOL_OPTS=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;autoneg on speed 1000 duplex full&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'config'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_data&lt;/span&gt;
    &lt;span class="n"&gt;hooking&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following is a description of the hook script.&lt;/p&gt;

&lt;p&gt;Reading in the data from the json file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hook_data = hooking.read_json()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting the value of the new ifcfg file content:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config_data = hook_data['config']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting the name of the ifcfg file which will be modified:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ifcfg_file = hook_data['ifcfg_file']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify the content of the ifcfg file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config_data += "USERCTL=yes\nETHTOOL_OPTS=\"autoneg on speed 1000 duplex full\"\n"
hook_data['config'] = config_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Write the content of the ifcfg file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hooking.write_json(hook_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Advanced Users Authentication, Using Kerberos, CAS SSO and Active Directory</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/04/sso.html"/>
    <id>http://ovirt.org/blog/2016/04/sso.html</id>
    <published>2016-04-25T15:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Fabrice Bacchella</name>
    </author>
    <content type="html">&lt;p&gt;I have a environment where hard coded password are avoided. We prefer to use Kerberos. We also provided a SSO for Web UI using &lt;a href="http://jasig.github.io/cas/4.2.x/index.html"&gt;CAS&lt;/a&gt;. We use ActiveDirectory for users backend.&lt;/p&gt;

&lt;p&gt;So I wanted a oVirt installation that will use kerberos for API authentication. For the web UI, Kerberos is not always the best solution, so I wanted to integrated it in our CAS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The Apache part was easy to setup. It needs an external module, auth_cas_module, that can be found at &lt;a href="https://wiki.jasig.org/display/CASC/mod_auth_cas"&gt;Apache's CAS module&lt;/a&gt;. It builds without special tweaks with&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will show only subpart of the whole Apache setup and only authentication related part&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# The CAS modules
LoadModule authz_user_module      /usr/lib64/httpd/modules/mod_authz_user.so
# Needed because auth_cas_module forget to link openssl
LoadModule ssl_module            /usr/lib64/httpd/modules/mod_ssl.so
LoadModule auth_cas_module       /usr/lib64/httpd/modules/mod_auth_cas.so

# For the kerberos authentication on the API
LoadModule auth_gssapi_module    /usr/lib64/httpd/modules/mod_auth_gssapi.so
LoadModule session_module        /usr/lib64/httpd/modules/mod_session.so
LoadModule session_cookie_module /usr/lib64/httpd/modules/mod_session_cookie.so

CASLoginURL https://sso/cas/login
CASValidateSAML On
CASValidateURL https://sso/cas/samlValidate

&amp;lt;VirtualHost *:443&amp;gt;

    RequestHeader unset X-Remote-User early

    &amp;lt;LocationMatch ^/api($|/)&amp;gt;
        RequestHeader set X-Remote-User %{REMOTE_USER}s

        RewriteEngine on
        RewriteCond %{LA-U:REMOTE_USER} ^(.*@DOMAIN)$
        RewriteRule ^(.*)$ - [L,P,E=REMOTE_USER:%1]

        AuthType GSSAPI
        AuthName "GSSAPI Single Sign On Login"
        GssapiCredStore keytab:.../httpd.keytab
        Require valid-user
        GssapiUseSessions On
        Session On
        SessionCookieName ovirt_gssapi_session path=/private;httponly;secure;
    &amp;lt;/LocationMatch&amp;gt;

    &amp;lt;LocationMatch ^/(ovirt-engine($|/)|RHEVManagerWeb/|OvirtEngineWeb/|ca.crt$|engine.ssh.key.txt$|rhevm.ssh.key.txt$)&amp;gt;
        AuthType CAS
        Require valid-user
        CASAuthNHeader X-Remote-User
    &amp;lt;/LocationMatch&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file httpd.keytab contains the kerberos ticket for the service HTTP. In my setup, the realm using for Linux machine is different
than the active directory's domain, and a trust was established between them. So the keytab is created using MIT kerberos.&lt;/p&gt;

&lt;p&gt;It was generated using the following &lt;code&gt;kadmin&lt;/code&gt; commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;addprinc -randkey HTTP/VHOST@REALM
addprinc -randkey HTTP/FQDN@REALM
ktadd -k .../http.keytab -e aes128-cts-hmac-sha1-96:normal -e aes256-cts-hmac-sha1-96:normal HTTP/VHOST@REALM
ktadd -k .../http.keytab -e aes128-cts-hmac-sha1-96:normal -e aes256-cts-hmac-sha1-96:normal HTTP/FQDN@REALM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kerberos can be surprising when resolving principal and http client uses different method. Some requests an ticket using directly the Host header. Some other choose the reverse of the IP used for the connection.
So if Apache is configured using a virtual host, both principal for the virtual host and the FQDN pointed by the reverse of the IP should be created and added to the keytab.&lt;/p&gt;

&lt;p&gt;The authn file &lt;code&gt;/etc/ovirt-engine/extensions.d/apachesso-authn.properties&lt;/code&gt; is :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovirt.engine.extension.name = apachesso-authn
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.misc
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.misc.http.AuthnExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Authn
ovirt.engine.aaa.authn.profile.name = apachesso
ovirt.engine.aaa.authn.authz.plugin = DOMAIN-authz
config.artifact.name = HEADER
config.artifact.arg = X-Remote-User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the authz file &lt;code&gt;/etc/ovirt-engine/extensions.d/DOMAIN-authz.properties&lt;/code&gt; is:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovirt.engine.extension.name = DOMAIN-authz
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.ldap
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.ldap.AuthzExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Authz
config.profile.file.1 = ..../aaa/DOMAIN.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had some difficulties with AD backend. A straightforward solution would have been :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include = &amp;lt;ad.properties&amp;gt;

vars.domain = DOMAIN
vars.user = BINDDN
vars.password = BINDPWD
vars.forest = domain.com

pool.default.auth.simple.bindDN = ${global:vars.user}
pool.default.auth.simple.password = ${global:vars.password}
pool.default.serverset.type = srvrecord
pool.default.serverset.srvrecord.domain = ${global:vars.domain}

pool.default.ssl.startTLS = true
pool.default.ssl.truststore.file = .../domain.jks
pool.default.ssl.truststore.password =
# Only TLSv1.2 is secure nowadays
pool.default.ssl.startTLSProtocol = TLSv1.2

# long time out should be avoided
pool.default.connection-options.connectTimeoutMillis = 500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if fails. We have a special setup with about 100 domain controlers and only two of them can be reached from the ovirt engine. So my first try was so defined them directly in the configuration file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pool.default.serverset.type = failover
pool.default.serverset.failover.1.server = dcX.domain.com
pool.default.serverset.failover.2.server = dcY.domain.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that fails. oVirt-engine was still using a lot of unreachable domain controler. After some digging I found that other part of the ldap extension use a different serverset, I don’t know why it don’t reuse the default pool. It’s called &lt;code&gt;pool.default.dc-resolve&lt;/code&gt; (it should be called &lt;code&gt;pool.dc-resolve&lt;/code&gt;, as it’s not the default but a custom one), so I added in my configuration:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pool.default.dc-resolve.default.serverset.type = failover
pool.default.dc-resolve.serverset.failover.1.server = dcX.domain.com
pool.default.dc-resolve.serverset.failover.2.server = dcY.domain.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I worked well, but there is a better solution as Ondra Machacek point it to me. In Active Directory, there is something called a “site”, with a subset of all the domain controler in it. It can be found under &lt;code&gt;CN=Sites,CN=Configuration,DC=DOMAIN,...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To list them:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ldapsearch -H ldap://somedc -b CN=Sites,CN=Configuration,DC=DOMAIN -s one -o ldif-wrap=no cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The information to write down is the &lt;code&gt;cn&lt;/code&gt; returned&lt;/p&gt;

&lt;p&gt;You get a list of all sites, just pick the right one, remove all the serverset configuration and add :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pool.default.serverset.srvrecord.domain-conversion.type = regex
pool.default.serverset.srvrecord.domain-conversion.regex.pattern = ^(?&amp;lt;domain&amp;gt;.*)$
pool.default.serverset.srvrecord.domain-conversion.regex.replacement = GOOD_SITE._sites.${domain}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The entry &lt;code&gt;_sites.${domain}&lt;/code&gt; don’t exist in the DNS, so to check that your regex is good, try instead:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dig +short _ldap._tcp.GOOD_SITE._sites.${domain} srv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should return only reachable domain controlers.&lt;/p&gt;

&lt;p&gt;So the final &lt;code&gt;/etc/ovirt-engine/aaa/DOMAIN.properties&lt;/code&gt; was :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include = &amp;lt;ad.properties&amp;gt;

vars.domain = DOMAIN
vars.user = BINDDN
vars.password = BINDPWD
vars.forest = domain.com

pool.default.auth.simple.bindDN = ${global:vars.user}
pool.default.auth.simple.password = ${global:vars.password}
pool.default.serverset.type = srvrecord
pool.default.serverset.srvrecord.domain = ${global:vars.domain}

pool.default.ssl.startTLS = true
pool.default.ssl.truststore.file = .../domain.jks
pool.default.ssl.truststore.password =
pool.default.ssl.startTLSProtocol = TLSv1.2

pool.default.connection-options.connectTimeoutMillis = 500

pool.default.serverset.srvrecord.domain-conversion.type = regex
pool.default.serverset.srvrecord.domain-conversion.regex.pattern = ^(?&amp;lt;domain&amp;gt;.*)$
pool.default.serverset.srvrecord.domain-conversion.regex.replacement = GOOD_SITE._sites.${domain}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this setup, my &lt;a href="https://github.com/fbacchella/ovirtcmd"&gt;python client&lt;/a&gt; can connect to ovirt-engine using kerberos ticket, web users are authenticated using CAS. And there is no need to duplicate user base.&lt;/p&gt;
</content>
  </entry>
</feed>
