<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oVirt</title>
  <subtitle>Tag: Vdsm</subtitle>
  <id>http://ovirt.org/blog/</id>
  <link href="http://ovirt.org/blog/"/>
  <link href="http://ovirt.org/blog/tag/vdsm.xml" rel="self"/>
  <updated>2019-05-27T15:35:00+00:00</updated>
  <author>
    <name/>
  </author>
  <entry>
    <title>LVM Configuration the Easy Way</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/12/lvm-configuration-the-easy-way.html"/>
    <id>http://ovirt.org/blog/2017/12/lvm-configuration-the-easy-way.html</id>
    <published>2017-12-04T09:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>jmarks, nsofer</name>
    </author>
    <content type="html">&lt;p&gt;Now oVirt features a simple way to prevent a host from scanning and then activating logical volumes that are not required directly by the host. In particular, the solution addresses logical volumes on shared storage managed by oVirt, and logical volumes created by a guest in oVirt raw volumes. Why is a solution required? Because scanning and activating other logical volumes may cause data corruption, slow boot, and other issues.&lt;/p&gt;

&lt;p&gt;The solution is configuring an LVM filter on each host, which allows LVM on a host to scan only the logical volumes required directly by the host. To achieve this, we have introduced a vdsm-tool command, config-lvm-filter, that will configure the host for you.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The new command, &lt;code&gt;vdsm-tool config-lvm-filter&lt;/code&gt; analyzes the current LVM configuration to decide
whether a filter should be configured. Then, if the LVM filter has yet to be configured, the command generates an LVM filter option for this host, and adds the option to the LVM configuration.&lt;/p&gt;

&lt;h2 id="scenario-1-an-unconfigured-host"&gt;Scenario 1: An Unconfigured Host&lt;/h2&gt;

&lt;p&gt;On a host yet to be configured, the command automatically configures the LVM once the user confirms the operation:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vdsm-tool config-lvm-filter
Analyzing host...
Found these mounted logical volumes on this host:

  logical volume:  /dev/mapper/vg0-lv_home
  mountpoint:      /home
  devices:         /dev/vda2

  logical volume:  /dev/mapper/vg0-lv_root
  mountpoint:      /
  devices:         /dev/vda2

  logical volume:  /dev/mapper/vg0-lv_swap
  mountpoint:      [SWAP]
  devices:         /dev/vda2

This is the recommended LVM filter for this host:

  filter = [ "a|^/dev/vda2$|", "r|.*|" ]

This filter will allow LVM to access the local devices used by the
hypervisor, but not shared storage owned by Vdsm. If you add a new
device to the volume group, you will need to edit the filter manually.

Configure LVM filter? [yes,NO] ? [NO/yes] yes
Configuration completed successfully!

Please reboot to verify the LVM configuration.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="scenario-2-a-configured-host"&gt;Scenario 2: A Configured Host&lt;/h2&gt;

&lt;p&gt;If the host is already configured, the command simply informs the user that the LVM filter is already configured:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vdsm-tool config-lvm-filter
Analyzing host...
LVM filter is already configured for Vdsm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="scenario-3-manual-configuration-required"&gt;Scenario 3: Manual Configuration Required&lt;/h2&gt;

&lt;p&gt;If the host configuration does not match the configuration required by Vdsm, the LVM filter will need to be configured manually:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# vdsm-tool config-lvm-filter
Analyzing host...
Found these mounted logical volumes on this host:

  logical volume:  /dev/mapper/vg0-lv_home
  mountpoint:      /home
  devices:         /dev/vda2

  logical volume:  /dev/mapper/vg0-lv_root
  mountpoint:      /
  devices:         /dev/vda2

  logical volume:  /dev/mapper/vg0-lv_swap
  mountpoint:      [SWAP]
  devices:         /dev/vda2

This is the recommended LVM filter for this host:

  filter = [ "a|^/dev/vda2$|", "r|.*|" ]

This filter will allow LVM to access the local devices used by the
hypervisor, but not shared storage owned by Vdsm. If you add a new
device to the volume group, you will need to edit the filter manually.

This is the current LVM filter:

  filter = [ "a|^/dev/vda2$|", "a|^/dev/vdb1$|", "r|.*|" ]

WARNING: The current LVM filter does not match the recommended filter,
Vdsm cannot configure the filter automatically.

Please edit /etc/lvm/lvm.conf and set the 'filter' option in the
'devices' section to the recommended value.

It is recommended to reboot after changing LVM filter.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="future-developments"&gt;Future Developments&lt;/h2&gt;
&lt;p&gt;In the future, we plan to integrate the command into the host deployment. This will allow the LVM filter to be configured automatically in common scenarios.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Engine XML Brings a Smoother Flow of Data Into oVirt</title>
    <link rel="alternate" href="http://ovirt.org/blog/2017/11/engine-xml.html"/>
    <id>http://ovirt.org/blog/2017/11/engine-xml.html</id>
    <published>2017-11-09T09:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>jmarks, ahadas</name>
    </author>
    <content type="html">&lt;p&gt;on November 8, oVirt 4.2 saw the introduction of an important behind-the-scenes enhancement.&lt;/p&gt;

&lt;p&gt;The change is associated with the exchange of information between the engine and the VDSM. It addresses the issue of multiple abstraction layers, with each layer needing to convert its input into a suitably readable format in order to report to the next layer.&lt;/p&gt;

&lt;p&gt;This change improves data communication between the engine and Libvirt - the tool that manages platform virtualization.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h4 id="background"&gt;Background&lt;/h4&gt;

&lt;p&gt;Previously, the configuration file for a newly created virtual machine (VM) originated in the engine as a map or dictionary.
Then, in the VDSM, it was converted into an XML file that was readable by Libvirt. This process required a greater coding
effort which in turn slowed down the development process.&lt;/p&gt;

&lt;h4 id="whats-changed"&gt;What's changed?&lt;/h4&gt;
&lt;p&gt;Now, this map or dictionary has been replaced by engine XML, an XML configuration file that complies with the Libvirt API.
VDSM now simply routes this Libvirt-readable file to/from Libvirt, in VM lifecycle (virt) related flows.&lt;/p&gt;

&lt;p&gt;As an oVirt user, it’s business as usual.&lt;/p&gt;

&lt;p&gt;However, if you are a developer dealing with debugging issues that involve running a VM, simply be aware that the Domain XML is now generated by ovirt-engine, and printed to engine.log.&lt;/p&gt;

&lt;p&gt;Also, if you are debugging issues with device monitoring, note that ovirt-engine matches the devices reported by Libvirt with those stored in the database rather than VDSM.&lt;/p&gt;

&lt;p&gt;The figure below shows the new flow for running a VM:&lt;/p&gt;

&lt;p&gt;&lt;img alt="" width="635" height="122" src="/images/blog/run_vm.png?1560777613" /&gt;&lt;/p&gt;

&lt;p&gt;For an in-depth description of the new enhancement, read Arik Hadas’ &lt;a href="http://ahadas.github.io/engine-xml/"&gt;Addressing Abstraction Hell in oVirt&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
