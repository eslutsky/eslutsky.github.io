<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>oVirt</title>
  <subtitle>Tag: Blog</subtitle>
  <id>http://ovirt.org/blog/</id>
  <link href="http://ovirt.org/blog/"/>
  <link href="http://ovirt.org/blog/tag/blog.xml" rel="self"/>
  <updated>2019-05-27T15:35:00+00:00</updated>
  <author>
    <name/>
  </author>
  <entry>
    <title>oVirt Software Defined Networking, The OVN Network Provider</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/11/ovirt-provider-ovn.html"/>
    <id>http://ovirt.org/blog/2016/11/ovirt-provider-ovn.html</id>
    <published>2016-11-02T17:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Marcin Mirecki</name>
    </author>
    <content type="html">&lt;p&gt;oVirt offers not only its own internal networking, but also an API for external network providers. This API enables using external network management software inside environments managed by oVirt and takes advantage of their extended capabilities.
One of such solutions is OVN: Open Virtual Network. OVN is an OVS (Open vSwitch) extension that brings Software Defined Networking to &lt;a href="http://openvswitch.github.io/support/dist-docs/README.rst.html"&gt;OVS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OVN enables support for virtual networks abstraction by adding native OVS support for virtual L2 and L3 overlays.
This allows the user to create as many VM networks as required, without troubling the adminstrator with vlan requests or infrastructure changes.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The oVirt provider for OVN consists of two parts:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The oVirt OVN driver&lt;/li&gt;
  &lt;li&gt;The oVirt OVN provider&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="ovirt-ovn-driver"&gt;oVirt OVN Driver&lt;/h2&gt;

&lt;p&gt;The oVirt OVN driver is the Virtual Interface Driver placed on oVirt hosts that handle the wiring of VM NICs to OVN networking.&lt;/p&gt;

&lt;p&gt;The driver allows Vdsm, libvirt, and OVN to interact whenever a NIC is plugged in such a way that the VM NIC is added to an appropriate OVN Logical Switch and the appropriate OVN overlays on all the hosts in the oVirt environment.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-driver-1.0-1.fc24.noarch.rpm"&gt;oVirt OVN driver rpm&lt;/a&gt; is now available for testing. The latest version can always be downloaded and built from the repository (described later in this article). Once the rpm is downloaded, it can be installed in the following way:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install ovirt-provider-ovn-driver-1.0-1.fc24.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OVN requires Vdsm and OVN (version 2.6 or later) to be installed on the host. The following OVN packages are required by the ovirt-provider-ovn-driver rpm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;openvswitch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-common&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-host&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;python-openvswitch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are available from the &lt;a href="http://openvswitch.org/download/"&gt;OVS website&lt;/a&gt; or built using the code downloaded from the OVS repo (described below).&lt;/p&gt;

&lt;p&gt;The OVN-controller service can be started using the following command:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl start ovn-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to make the service start automatically at boot, the service could be enabled using:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl enable ovn-controller
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installing the driver and OVN, the OVN-controller must be configured. This can be done either using the vdsm-tool:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;vdsm-tool ovn-config &amp;lt;OVN central server IP&amp;gt; &amp;lt;local IP used for OVN tunneling&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second parameter (local IP used for OVN tunneling) can be the IP address of the ovirtmgmt interface on the host, and should be reachable by OVN hosts and central server.
vdsm-tool will also configure ovn-controller with the PKI required to safely connect to the ovn central server.
To add support for Transport Layer Security (TLS) connectivity with the OVN-controller, vdsm-tool will use the VDSM private and public keys, and configures OVN-controller to enable PKI encryption between the host and the OVN south db on the OVN central server. This provides privacy and data-integrity in the management connections to the south database&lt;/p&gt;

&lt;p&gt;The OVN-controller can also be set up by using the OVN command-line interface directly. For more information about OVN-controller setup, please check the
&lt;a href="http://openvswitch.org/support/dist-docs/"&gt;OVS documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The command above should create OVN tunnels to other OVN controllers (if at least one other ovn-controller is present).
Please verify that the tunnel has been created by issuing the following commands:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ip link&lt;/code&gt; - the result should include a link called &lt;code&gt;genev_sys_ ...&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ovs-vsctl show&lt;/code&gt; - the bridge &lt;code&gt;br-int&lt;/code&gt; should include a port looking somewhat like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;Port "ovn-6b2d2f-0"
   Interface "ovn-6b2d2f-0"
        type: geneve
        options: {csum="true", key=flow, remote_ip="10.35.128.14"}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Please check the OVN logs in case of problems. The relevant OVN logs are located in &lt;code&gt;/var/log/openvswitch/&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="ovirt-ovn-provider"&gt;oVirt OVN Provider&lt;/h2&gt;

&lt;p&gt;The oVirt OVN provider is a proxy that the oVirt Engine uses to interact with OVN. It is delivered as an rpm that is to be installed on the host where OVN central is installed.&lt;/p&gt;

&lt;p&gt;The &lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-1.0-1.fc24.noarch.rpm"&gt;oVirt OVN provider RPM&lt;/a&gt; is also available now. The latest version can always be downloaded and built from the repository as well. Once the rpm is downloaded, it can be installed with this command:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum install ovirt-provider-ovn-1.0-1.fc24.noarch.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;OVN requires OVN to be installed on the host (version 2.6 or later).
The OVN provider requires the following OVS and OVN packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;openvswitch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-common&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;openvswitch-ovn-central&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;python-openvswitch&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are also available from the &lt;a href="http://openvswitch.org/download/"&gt;OVS website&lt;/a&gt; or built using the code downloaded from the OVS repo (described below).&lt;/p&gt;

&lt;p&gt;After installing the oVirt OVN provider, the admin needs to open up port 9696 in the firewall.
This can be done manually or by adding the ovirt-provider-ovn firewalld service to the appropriate firewalld zone with:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firewall-cmd --zone=&amp;lt;zone to add service to&amp;gt; --add-service=ovirt-provider-ovn --permanent
firewall-cmd --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The zone currently selected as default can be obtained by executing:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firewall-cmd --get-default-zone
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Firewalld also needs to be configured for OVN components. This will be handled by OVN in the near future (https://bugzilla.redhat.com/1390938).
In the mean time the following commands open the required ports on the OVN central server:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" port protocol="tcp" port="6641" accept'

firewall-cmd --permanent --zone=public --add-rich-rule='rule family="ipv4" port protocol="tcp" port="6642" accept'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Stop iptables on the hosts (needed for OVN tunnels):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl stop iptables
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After installation, the provider can be started as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl start ovirt-provider-ovn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enable the service in order to make it start at boot, use:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;systemctl enable ovirt-provider-ovn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since OVS 2.7, OVN central must be configured to listen to requests on appropriate ports:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovn-sbctl set-connection ptcp:6642
ovn-nbctl set-connection ptcp:6641
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The provider can then be added to oVirt as an external network provider. In order to add a new provider, go to the External Providers section in the oVirt UI and click the Add button.&lt;/p&gt;

&lt;p&gt;&lt;img alt="adding a new provider" width="749" height="482" src="/images/new-ovirt-provider-ovn.png?1560777613" /&gt;&lt;/p&gt;

&lt;p&gt;When the provider is successfully added, existing OVN networks can be imported to oVirt.
New OVN networks can be defined using oVirt by adding a network and specifying it to be added on an external provider (make sure you add the external provider in read-write mode, so that you can add external networks from oVirt).&lt;/p&gt;

&lt;p&gt;A vNIC can be attached to OVN network by simply choosing an external network during NIC provisioning.&lt;/p&gt;

&lt;p&gt;OVN based networking brings many advantages to oVirt:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;More granular security - it brings complete network isolation without the need for defining VLANs.&lt;/li&gt;
  &lt;li&gt;Easier management - the management of the networking infrastructure should also become much easier, as instead of managing the network isolation on each of the networking components, it will be automatically taken care of by OVN.&lt;/li&gt;
  &lt;li&gt;Self service - the user can create many VM networks without troubling the network admin with vlan or infrastructure requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="building-ovirt-ovn-provider-rpms-from-repository"&gt;Building oVirt OVN Provider rpms from repository&lt;/h2&gt;

&lt;p&gt;Clone the repository:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://gerrit.ovirt.org/ovirt-provider-ovn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the rpms:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ovirt-provider-ovn
make rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The built rpms can be found in: &lt;code&gt;~/rpmbuild/RPMS/noarch/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="building-ovn-rpms-from-repository"&gt;Building OVN rpms from repository&lt;/h2&gt;

&lt;p&gt;Note: for the most up-to-date description of building OVS resources please refer to &lt;a href="http://openvswitch.org"&gt;the OVS site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Clone the repository:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;git clone https://github.com/openvswitch/ovs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install the following packages, as they are need to build ovn:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;yum -y install gcc make python-devel openssl-devel kernel-devel graphviz kernel-debug-devel autoconf automake rpm-build redhat-rpm-config rpm-build rpmdevtools bash-completion autoconf automake libtool PyQt4 groff libcap-ng-devel python-twisted-core python-zope-interface graphviz openssl-devel selinux-policy-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Build the ovn rpms:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;cd ovs
./boot.sh
./configure
make dist
cp openvswitch-&amp;lt;version&amp;gt;.tar.gz $HOME/rpmbuild/SOURCES
cd $HOME/rpmbuild/SOURCES
tar xzf openvswitch-&amp;lt;version&amp;gt;.tar.gz
cd openvswitch-&amp;lt;version&amp;gt;
rpmbuild -bb rhel/openvswitch-fedora.spec
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The built rpms will reside here: &lt;code&gt;~/rpmbuild/RPMS/x86_64/&lt;/code&gt;&lt;/p&gt;

&lt;h2 id="provider-setup-using-the-engine-setup-script"&gt;Provider setup using the engine-setup script&lt;/h2&gt;

&lt;p&gt;The provider can be set up on the engine host using the engine-setup tool.
The engine-setup tool is part of oVirt engine installation and is located in:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;/bin/engine-setup
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;During the setup process, engine-setup script will ask the user several questions related to OVN:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Install ovirt-provider-ovn(Yes, No) [Yes]?:&lt;/code&gt;
If 'Yes', engine-setup will install ovirt-provider-ovn.
If engine-setup is used to update a system, this will only be asked if ovirt-provider-ovn has not been installed previously.
If you reply 'No', you will not be asked again on the next run of engine-setup. If you do want to get asked again, run engine-setup with '–reconfigure-optional-components'.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Use default credentials (admin@internal) for ovirt-provider-ovn(Yes, No) [Yes]?:&lt;/code&gt;
If 'Yes', engine-setup will use the default engine user and password specified earlier in the setup process.
This option is only available during new installations.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;oVirt OVN provider user[admin]:&lt;/code&gt;
 If the default credentials are not chosen, the user name which to use to connect to the provider.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;oVirt OVN provider password[empty]:&lt;/code&gt;
 If the default credentials are not chosen, the password to use to connect to the provider.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If used to set up ovirt-provider-ovn, engine-setup will perform the following tasks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install OVS and OVN packages on the engine&lt;/li&gt;
  &lt;li&gt;install ovirt-provider-ovn on the engine&lt;/li&gt;
  &lt;li&gt;add and configure a default External Network OVN provider. The engine provider will be configured to connect to provider on localhost. The provider will also be configured with the user and password specified during the setup process.&lt;/li&gt;
  &lt;li&gt;generate the PKI (public key infrastructure) for OVN north db, OVN southdb and ovirt-provider-ovn (shared key for serving https and comunicating with OVN north db)&lt;/li&gt;
  &lt;li&gt;configure the OVN north and south databases to use SSL&lt;/li&gt;
  &lt;li&gt;configure the provider to use https&lt;/li&gt;
  &lt;li&gt;configure the provider to connect to OVN north DB using SSL&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="configuring-pki-manually"&gt;Configuring PKI manually&lt;/h3&gt;

&lt;p&gt;The PKI (public key infrastructure) for the provider and driver are configured automatically by engine-setup and vdsm-tool.
In case where the provider is not installed together with ovirt-engine, PKI will need to be created and configured manually.&lt;/p&gt;

&lt;p&gt;In such a case, key/certificate pair signed by a common authority will be needed for the provider, ovn north db, ovn south db, and each of the ovn controllers.&lt;/p&gt;

&lt;p&gt;Some of the possible ways to generate key/certificate pairs are using &lt;a href="https://www.openssl.org/"&gt;OpenSSL&lt;/a&gt; or openvswitch &lt;a href="http://openvswitch.org/support/dist-docs/ovs-pki.8.txt"&gt;ovs-pki command&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The ovn north db must be configured using the following commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovn-nbctl set-ssl &amp;lt;private key file&amp;gt; &amp;lt;certificate file&amp;gt; &amp;lt;ca certificate file&amp;gt;
ovn-nbctl set-connection pssl:6641
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The ovn south db must be configured using the following commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovn-sbctl set-ssl &amp;lt;private key file&amp;gt; &amp;lt;certificate file&amp;gt; &amp;lt;ca certificate file&amp;gt;
ovn-sbctl set-connection pssl:6642
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The provider must be configured by setting the follwing values in the configuration file (/etc/ovirt-provider-ovn/ovirt-provider-ovn.conf):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[SSL]
ssl_enabled=true # enables/disables https for the REST API
key-file=&amp;lt;private key file&amp;gt;
cert-file=&amp;lt;certificate file&amp;gt;
cacert-file=&amp;lt;ca certificate file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The PKI of the provider will be used to connect to the OVN north db, as well as for the https connection.
The CA certificate must used for signing the certificate must be added to the external provider trust store on the engine:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;keytool -import -alias &amp;lt;certificate alias&amp;gt; -keystore &amp;lt;key store file&amp;gt; -file &amp;lt;ca certificate file&amp;gt; -noprompt -storepass &amp;lt;store password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The key store file and the store password are defined in &lt;code&gt;/usr/share/ovirt-engine/services/ovirt-engine/ovirt-engine.conf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The ovn-controller can be set up using the &lt;code&gt;setup_ovn_controller&lt;/code&gt; script (/usr/libexec/ovirt-provider-ovn/setup_ovn_controller.sh):&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;setup_ovn_controller.sh &amp;lt;OVN central IP&amp;gt; &amp;lt;local tunneling IP&amp;gt; &amp;lt;private key file&amp;gt; &amp;lt;certificate file&amp;gt; &amp;lt;ca certificate file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id="tested-environments"&gt;Tested environments&lt;/h2&gt;

&lt;p&gt;This guide has been tested on both Fedora24 and RHEL7 environments.&lt;/p&gt;

&lt;p&gt;Note: Currently a OVS spec file for Fedora is the only available in the OVS repo. We are however using the generated rpm's on RHEL7 and have not encountered any problems so far. Please consult the OVS team for more info.&lt;/p&gt;

&lt;h2 id="useful-links"&gt;Useful Links&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-1.0-1.fc24.noarch.rpm"&gt;ovirt-provider-ovn RPM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://resources.ovirt.org/repos/mmirecki/ovirt-provider-ovn-driver-1.0-1.fc24.noarch.rpm"&gt;ovirt-provider-ovn-driver RPMy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://jenkins.ovirt.org/job/ovirt-provider-ovn_master_build-artifacts-el7-x86_64/lastSuccessfulBuild/artifact/exported-artifacts/"&gt;Latest development build&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="https://gerrit.ovirt.org/#/q/project:ovirt-provider-ovn"&gt;Project repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.ovirt.org/develop/release-management/features/ovirt-ovn-provider/"&gt;oVirt provider for OVN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href="http://www.ovirt.org/develop/release-management/features/external-network-provider/"&gt;External network providers&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href="http://openvswitch.org/support/dist-docs/"&gt;OVS ducumentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://openvswitch.org/support/dist-docs/ovn-architecture.7.html"&gt;OVN architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
  </entry>
  <entry>
    <title>oVirt Engine 4.0 Installation Issues on Fedora 24</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/07/ovirt-engine-4-setup-in-fedora24.html"/>
    <id>http://ovirt.org/blog/2016/07/ovirt-engine-4-setup-in-fedora24.html</id>
    <published>2016-07-26T16:30:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Yanir Quinn</name>
    </author>
    <content type="html">&lt;p&gt;This blog post relates to oVirt Engine release 4.0 installation on Fedora 24 and probably is relevant for earlier oVirt releases.
Having Fedora 24 (Twenty Four) installed on my new laptop (while it was still in beta phase, but this is still relevant for GA),
I ran an oVirt installation and encountered the following error message:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovirt-engine[5566] ERROR run:532 Error: Unable to change process owner ([Errno 1] Operation not permitted)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is an outcome of permission problems with python-daemon 2.1.0, which is the default package in the Fedora 24 release.&lt;/p&gt;

&lt;p&gt;To overcome this issue, I had to downgrade the python-daemon version to 2.0.6 (e.g., &lt;code&gt;sudo pip install python-daemon==2.0.6&lt;/code&gt;,
a reference to similar general issue can be found here: https://groups.google.com/forum/#!topic/pywws/I0c_RW4DRzg)&lt;/p&gt;

&lt;p&gt;Any further issues related to oVirt installation and Fedora 24 will be added to this blog post.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Dependency Injection and Mockito</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/07/dependency-injection-and-mockito.html"/>
    <id>http://ovirt.org/blog/2016/07/dependency-injection-and-mockito.html</id>
    <published>2016-07-12T13:15:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Jenny Tokar</name>
    </author>
    <content type="html">&lt;p&gt;Recently I encountered a small issue in a static helper class that was full of static helper methods. After I finished dealing with the issue at hand and as part of following the Boy Scout rule (always leave the campground cleaner than you found it) I decided to refactor the class and the code using it.&lt;/p&gt;

&lt;p&gt;More specifically to remove all the static modifiers and to inject this class whenever it was needed.
The refactoring was easy enough but things got a bit more interesting once I got to a class that was using one of the static helper methods.&lt;/p&gt;

&lt;p&gt;The class had a wrapper method that called the static method and did nothing more.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nd"&gt;@Inject&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;HostedEngineHelper&lt;/span&gt; &lt;span class="n"&gt;hostedEngineHelper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;boolean&lt;/span&gt; &lt;span class="nf"&gt;isHostedEngine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorageDomain&lt;/span&gt; &lt;span class="n"&gt;storageDomain&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;hostedEngineHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isHostedEngineStorageDomain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;storageDomain&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Those kind of wrapper methods are common in code that uses mocking testing frameworks for unit testing. They certainly are very easy to mock. However, code shouldn’t exist for the sake of tests and unnecessary methods that are dirtying it should be removed.&lt;/p&gt;

&lt;h2 id="introducing-injectmocks"&gt;Introducing @InjectMocks&lt;/h2&gt;

&lt;p&gt;And here comes the nice part: Mockito supports injecting mock classes into the tested class in a very neat way.
You simply add the helper class you need with the &lt;strong&gt;“@Mock”&lt;/strong&gt; annotation and put the &lt;strong&gt;“@InjectMocks”&lt;/strong&gt; annotation on the class you are mocking for testing and that’s it.&lt;/p&gt;

&lt;p&gt;Mockito will inject the mocked instance to the mocked class so you won’t fall on null pointer exceptions and you will be able to mock the methods you are not testing directly.&lt;/p&gt;

&lt;p&gt;So instead of having something like this in your test class:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;StorageDomainCommandBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StorageDomainParametersBase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spy&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TestStorageCommandBase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StorageDomainParametersBase&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shouldElectActiveDataDomain&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;StorageDomain&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;prepareStorageDomainForElection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorageDomainStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Active&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"not he domain name"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;doReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="na"&gt;isHostedEngine&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorageDomain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;electNewMaster&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You end up with something like this:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight java"&gt;&lt;code&gt;    &lt;span class="nd"&gt;@Mock&lt;/span&gt;
    &lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;HostedEngineHelper&lt;/span&gt; &lt;span class="n"&gt;hostedEngineHelper&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

    &lt;span class="nd"&gt;@InjectMocks&lt;/span&gt;
    &lt;span class="nd"&gt;@Spy&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;StorageDomainCommandBase&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;StorageDomainParametersBase&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;TestStorageCommandBase&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StorageDomainParametersBase&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;shouldElectActiveDataDomain&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;StorageDomain&lt;/span&gt; &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prepareStorageDomainForElection&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorageDomainStatus&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Active&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"not he domain name"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;when&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostedEngineHelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;isHostedEngineStorageDomain&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;any&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;StorageDomain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;))).&lt;/span&gt;&lt;span class="na"&gt;thenReturn&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;electNewMaster&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Injecting the helper class instead of using it in a static way allows a much cleaner way for writing clear and concise code that doesn't leave the readers wondering about redundant methods.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Modifying oVirt-Generated ifcfg Files</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/05/modify-ifcfg-files.html"/>
    <id>http://ovirt.org/blog/2016/05/modify-ifcfg-files.html</id>
    <published>2016-05-25T14:21:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Marcin Mirecki</name>
    </author>
    <content type="html">&lt;p&gt;oVirt is using a bridge based setup to configure networks on the managed hosts. The setup process is done by generating and maintaining network interface configuration files (ifcfg file), which define the network devices used by oVirt.
Should any changes be done to these files by an outside party, oVirt will try to restore them to the desired state, to keep the network configuration intact.
There are however situations in which the user want to intentionally introduce permanent changes into some of these files, and prohibit oVirt from overwritting them. In order to do so, VDSM hook script can be used.&lt;/p&gt;

&lt;p&gt;Lets look at an example, where the user want to add the following entries to the 'ens11' network interface:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;USERCTL=yes
ETHTOOL_OPTS="autoneg on speed 1000 duplex full"
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;A VDSM hook invoked before ifcfg file modification can be used to accomplish this.
The hook script should be placed inside the "/usr/libexec/vdsm/hooks/before_ifcfg_write/" directory on the VDSM host. VDSM must have execute permissions for this script. VDSM will check this directory every time ifcfg configuration is changed, and executes each script it finds in this directory.
The script will receive a json dictionary as input. The dictionary contains two elements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ifcfg_file - full path of the ifcfg file to be written&lt;/li&gt;
  &lt;li&gt;config - the contents of the ifcfg file to be written&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;{
    "config": "DEVICE=ens13\nHWADDR=52:54:00:d1:3d:c8\nBRIDGE=z\nONBOOT=yes\nMTU=1500\nNM_CONTROLLED=no\nIPV6INIT=no\n",
    "ifcfg_file": "/etc/sysconfig/network-scripts/ifcfg-ens7"
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modified ifcfg file contents (under the "config" entry) can be returned,and will be used by VDSM as the new ifcfg file content. If nothing is returned, VDSM will use the unmodified content.&lt;/p&gt;

&lt;p&gt;A sample hook script will look as follows:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight python"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;hooking&lt;/span&gt;

&lt;span class="n"&gt;hook_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hooking&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;ifcfg_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ifcfg_file'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;config_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'config'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# adding to ens11 ifcfg file: USERCTL=yes and ETHTOOL_OPTS="autoneg on speed 1000 duplex full"&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;'ens11'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ifcfg_file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;config_data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;"USERCTL=yes&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;ETHTOOL_OPTS=&lt;/span&gt;&lt;span class="se"&gt;\"&lt;/span&gt;&lt;span class="s"&gt;autoneg on speed 1000 duplex full&lt;/span&gt;&lt;span class="se"&gt;\"\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'config'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config_data&lt;/span&gt;
    &lt;span class="n"&gt;hooking&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_json&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hook_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Following is a description of the hook script.&lt;/p&gt;

&lt;p&gt;Reading in the data from the json file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hook_data = hooking.read_json()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting the value of the new ifcfg file content:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config_data = hook_data['config']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Getting the name of the ifcfg file which will be modified:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ifcfg_file = hook_data['ifcfg_file']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify the content of the ifcfg file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;config_data += "USERCTL=yes\nETHTOOL_OPTS=\"autoneg on speed 1000 duplex full\"\n"
hook_data['config'] = config_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Write the content of the ifcfg file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;hooking.write_json(hook_data)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Advanced Users Authentication, Using Kerberos, CAS SSO and Active Directory</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/04/sso.html"/>
    <id>http://ovirt.org/blog/2016/04/sso.html</id>
    <published>2016-04-25T15:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Fabrice Bacchella</name>
    </author>
    <content type="html">&lt;p&gt;I have a environment where hard coded password are avoided. We prefer to use Kerberos. We also provided a SSO for Web UI using &lt;a href="http://jasig.github.io/cas/4.2.x/index.html"&gt;CAS&lt;/a&gt;. We use ActiveDirectory for users backend.&lt;/p&gt;

&lt;p&gt;So I wanted a oVirt installation that will use kerberos for API authentication. For the web UI, Kerberos is not always the best solution, so I wanted to integrated it in our CAS.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The Apache part was easy to setup. It needs an external module, auth_cas_module, that can be found at &lt;a href="https://wiki.jasig.org/display/CASC/mod_auth_cas"&gt;Apache's CAS module&lt;/a&gt;. It builds without special tweaks with&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;./configure
make
make install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I will show only subpart of the whole Apache setup and only authentication related part&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;# The CAS modules
LoadModule authz_user_module      /usr/lib64/httpd/modules/mod_authz_user.so
# Needed because auth_cas_module forget to link openssl
LoadModule ssl_module            /usr/lib64/httpd/modules/mod_ssl.so
LoadModule auth_cas_module       /usr/lib64/httpd/modules/mod_auth_cas.so

# For the kerberos authentication on the API
LoadModule auth_gssapi_module    /usr/lib64/httpd/modules/mod_auth_gssapi.so
LoadModule session_module        /usr/lib64/httpd/modules/mod_session.so
LoadModule session_cookie_module /usr/lib64/httpd/modules/mod_session_cookie.so

CASLoginURL https://sso/cas/login
CASValidateSAML On
CASValidateURL https://sso/cas/samlValidate

&amp;lt;VirtualHost *:443&amp;gt;

    RequestHeader unset X-Remote-User early

    &amp;lt;LocationMatch ^/api($|/)&amp;gt;
        RequestHeader set X-Remote-User %{REMOTE_USER}s

        RewriteEngine on
        RewriteCond %{LA-U:REMOTE_USER} ^(.*@DOMAIN)$
        RewriteRule ^(.*)$ - [L,P,E=REMOTE_USER:%1]

        AuthType GSSAPI
        AuthName "GSSAPI Single Sign On Login"
        GssapiCredStore keytab:.../httpd.keytab
        Require valid-user
        GssapiUseSessions On
        Session On
        SessionCookieName ovirt_gssapi_session path=/private;httponly;secure;
    &amp;lt;/LocationMatch&amp;gt;

    &amp;lt;LocationMatch ^/(ovirt-engine($|/)|RHEVManagerWeb/|OvirtEngineWeb/|ca.crt$|engine.ssh.key.txt$|rhevm.ssh.key.txt$)&amp;gt;
        AuthType CAS
        Require valid-user
        CASAuthNHeader X-Remote-User
    &amp;lt;/LocationMatch&amp;gt;
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The file httpd.keytab contains the kerberos ticket for the service HTTP. In my setup, the realm using for Linux machine is different
than the active directory's domain, and a trust was established between them. So the keytab is created using MIT kerberos.&lt;/p&gt;

&lt;p&gt;It was generated using the following &lt;code&gt;kadmin&lt;/code&gt; commands:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;addprinc -randkey HTTP/VHOST@REALM
addprinc -randkey HTTP/FQDN@REALM
ktadd -k .../http.keytab -e aes128-cts-hmac-sha1-96:normal -e aes256-cts-hmac-sha1-96:normal HTTP/VHOST@REALM
ktadd -k .../http.keytab -e aes128-cts-hmac-sha1-96:normal -e aes256-cts-hmac-sha1-96:normal HTTP/FQDN@REALM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kerberos can be surprising when resolving principal and http client uses different method. Some requests an ticket using directly the Host header. Some other choose the reverse of the IP used for the connection.
So if Apache is configured using a virtual host, both principal for the virtual host and the FQDN pointed by the reverse of the IP should be created and added to the keytab.&lt;/p&gt;

&lt;p&gt;The authn file &lt;code&gt;/etc/ovirt-engine/extensions.d/apachesso-authn.properties&lt;/code&gt; is :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovirt.engine.extension.name = apachesso-authn
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.misc
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.misc.http.AuthnExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Authn
ovirt.engine.aaa.authn.profile.name = apachesso
ovirt.engine.aaa.authn.authz.plugin = DOMAIN-authz
config.artifact.name = HEADER
config.artifact.arg = X-Remote-User
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the authz file &lt;code&gt;/etc/ovirt-engine/extensions.d/DOMAIN-authz.properties&lt;/code&gt; is:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ovirt.engine.extension.name = DOMAIN-authz
ovirt.engine.extension.bindings.method = jbossmodule
ovirt.engine.extension.binding.jbossmodule.module = org.ovirt.engine-extensions.aaa.ldap
ovirt.engine.extension.binding.jbossmodule.class = org.ovirt.engineextensions.aaa.ldap.AuthzExtension
ovirt.engine.extension.provides = org.ovirt.engine.api.extensions.aaa.Authz
config.profile.file.1 = ..../aaa/DOMAIN.properties
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had some difficulties with AD backend. A straightforward solution would have been :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include = &amp;lt;ad.properties&amp;gt;

vars.domain = DOMAIN
vars.user = BINDDN
vars.password = BINDPWD
vars.forest = domain.com

pool.default.auth.simple.bindDN = ${global:vars.user}
pool.default.auth.simple.password = ${global:vars.password}
pool.default.serverset.type = srvrecord
pool.default.serverset.srvrecord.domain = ${global:vars.domain}

pool.default.ssl.startTLS = true
pool.default.ssl.truststore.file = .../domain.jks
pool.default.ssl.truststore.password =
# Only TLSv1.2 is secure nowadays
pool.default.ssl.startTLSProtocol = TLSv1.2

# long time out should be avoided
pool.default.connection-options.connectTimeoutMillis = 500
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if fails. We have a special setup with about 100 domain controlers and only two of them can be reached from the ovirt engine. So my first try was so defined them directly in the configuration file:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pool.default.serverset.type = failover
pool.default.serverset.failover.1.server = dcX.domain.com
pool.default.serverset.failover.2.server = dcY.domain.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But that fails. oVirt-engine was still using a lot of unreachable domain controler. After some digging I found that other part of the ldap extension use a different serverset, I don’t know why it don’t reuse the default pool. It’s called &lt;code&gt;pool.default.dc-resolve&lt;/code&gt; (it should be called &lt;code&gt;pool.dc-resolve&lt;/code&gt;, as it’s not the default but a custom one), so I added in my configuration:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pool.default.dc-resolve.default.serverset.type = failover
pool.default.dc-resolve.serverset.failover.1.server = dcX.domain.com
pool.default.dc-resolve.serverset.failover.2.server = dcY.domain.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I worked well, but there is a better solution as Ondra Machacek point it to me. In Active Directory, there is something called a “site”, with a subset of all the domain controler in it. It can be found under &lt;code&gt;CN=Sites,CN=Configuration,DC=DOMAIN,...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To list them:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;ldapsearch -H ldap://somedc -b CN=Sites,CN=Configuration,DC=DOMAIN -s one -o ldif-wrap=no cn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The information to write down is the &lt;code&gt;cn&lt;/code&gt; returned&lt;/p&gt;

&lt;p&gt;You get a list of all sites, just pick the right one, remove all the serverset configuration and add :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;pool.default.serverset.srvrecord.domain-conversion.type = regex
pool.default.serverset.srvrecord.domain-conversion.regex.pattern = ^(?&amp;lt;domain&amp;gt;.*)$
pool.default.serverset.srvrecord.domain-conversion.regex.replacement = GOOD_SITE._sites.${domain}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The entry &lt;code&gt;_sites.${domain}&lt;/code&gt; don’t exist in the DNS, so to check that your regex is good, try instead:&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;dig +short _ldap._tcp.GOOD_SITE._sites.${domain} srv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It should return only reachable domain controlers.&lt;/p&gt;

&lt;p&gt;So the final &lt;code&gt;/etc/ovirt-engine/aaa/DOMAIN.properties&lt;/code&gt; was :&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;include = &amp;lt;ad.properties&amp;gt;

vars.domain = DOMAIN
vars.user = BINDDN
vars.password = BINDPWD
vars.forest = domain.com

pool.default.auth.simple.bindDN = ${global:vars.user}
pool.default.auth.simple.password = ${global:vars.password}
pool.default.serverset.type = srvrecord
pool.default.serverset.srvrecord.domain = ${global:vars.domain}

pool.default.ssl.startTLS = true
pool.default.ssl.truststore.file = .../domain.jks
pool.default.ssl.truststore.password =
pool.default.ssl.startTLSProtocol = TLSv1.2

pool.default.connection-options.connectTimeoutMillis = 500

pool.default.serverset.srvrecord.domain-conversion.type = regex
pool.default.serverset.srvrecord.domain-conversion.regex.pattern = ^(?&amp;lt;domain&amp;gt;.*)$
pool.default.serverset.srvrecord.domain-conversion.regex.replacement = GOOD_SITE._sites.${domain}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this setup, my &lt;a href="https://github.com/fbacchella/ovirtcmd"&gt;python client&lt;/a&gt; can connect to ovirt-engine using kerberos ticket, web users are authenticated using CAS. And there is no need to duplicate user base.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>My Devconf.CZ 2016 experience</title>
    <link rel="alternate" href="http://ovirt.org/blog/2016/03/devconf-2016.html"/>
    <id>http://ovirt.org/blog/2016/03/devconf-2016.html</id>
    <published>2016-03-10T15:00:00+00:00</published>
    <updated>2019-06-16T09:04:04+00:00</updated>
    <author>
      <name>Yaniv Kaul</name>
    </author>
    <content type="html">&lt;p&gt;On the first weekend of February I had the pleasure of attending DevConf.CZ 2016, which took place in the wonderful city of Brno, Czech Republic.&lt;/p&gt;

&lt;p&gt;It's a relaxed, young, and vibrant conference and it was fun and rewarding from my perspective.&lt;/p&gt;

&lt;p&gt;Here's a disorganized personal summary…&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Met many community members from all over Europe. Was excited to see so many happy users of the project!&lt;/li&gt;
  &lt;li&gt;Attended &lt;a title="in-depth look of virtual machine migration algorithms - Marcelo Tosatti" href="https://www.youtube.com/watch?v=XkMIMJKJeTY"&gt;in-depth look of virtual machine migration algorithms - Marcelo Tosatti&lt;/a&gt;. I hope to see some of it in coming versions of QEMU, while we work on other improvements to this critical feature.&lt;/li&gt;
  &lt;li&gt;&lt;a title="Growing the ARM server ecosystem - Jim Perrin" href="https://www.youtube.com/watch?v=q4gU87wdRtI"&gt;Growing the ARM server ecosystem - Jim Perrin&lt;/a&gt; was interesting. Seems like a great positive effort, but the road is still long for complete support. Would be cool to support ARM based hosts running virtual machines!&lt;/li&gt;
  &lt;li&gt;Attended &lt;a title="Qemu Disk I/O: Which performs better, Native or Threads? - Pradeep K Surisetty" href="https://www.youtube.com/watch?v=Jx93riUF5_I"&gt;Qemu Disk I/O: Which performs better, Native or Threads? - Pradeep K Surisetty&lt;/a&gt;. The results were not conclusive, though some improvements in native brought it close to, or in some cases better than threads. Seems that our default of heuristic for threads in file-based storage and native in block based storage is fine for the time being, but we'll watch closely for developments in this area.&lt;/li&gt;
  &lt;li&gt;Attended &lt;a title="Debugging the Virtualization Layer (libvirt and QEMU) in OpenStack - Kashyap Chamarthy" href="https://www.youtube.com/watch?v=Dd2AGGMWXQM"&gt;Debugging the Virtualization Layer (libvirt and QEMU) in OpenStack - Kashyap Chamarthy&lt;/a&gt; - I think (and asked) if libvirt can do a better job - in saving in a cyclic log the QMP commands sent and the response from the guest and dump it in case of a guest crash.&lt;/li&gt;
  &lt;li&gt;Paid a visit to &lt;a title="Cockpit Hackfest - Dominik Perpeet, Marius Vollmer, Peter Volpe, Stef Walter" href="https://www.youtube.com/watch?v=TNDe90WSZow"&gt;Cockpit Hackfest - Dominik Perpeet, Marius Vollmer, Peter Volpe, Stef Walter&lt;/a&gt; - as we intend to use Cockpit as our UI for oVirt Next Generation Node, it was great to present our use case and exchange thoughts, ideas and directions. Few bugs were filed during the hackfest per our comments.&lt;/li&gt;
  &lt;li&gt;Attended &lt;a title="Dockerizing JBoss Products - David Becvarik" href="https://www.youtube.com/watch?v=NpyEoFlDzOQ"&gt;Dockerizing JBoss Products - David Becvarik&lt;/a&gt;. Great work done by the JBoss team to improve and streamline packaging of JBoss into containers.&lt;/li&gt;
  &lt;li&gt;Attended &lt;a title="Upstream First Testing - Tim Flink" href="https://www.youtube.com/watch?v=15-yXOJuonQ"&gt;Upstream First Testing - Tim Flink&lt;/a&gt;. I discussed with the presenter the possibility to run oVirt with &lt;a title="Lago project on GitHub" href="https://github.com/lago-project/lago"&gt;Lago project on GitHub&lt;/a&gt; in Fedora, in a CI way, by monitoring distgit changes for relevant packages (such as lvm2, device-mapper*, libvirt and others.&lt;/li&gt;
  &lt;li&gt;Attended &lt;a title="High performance VMs in OpenStack - Nikola Dipanov" href="https://www.youtube.com/watch?v=9J_sEdlpIlQ"&gt;High performance VMs in OpenStack - Nikola Dipanov&lt;/a&gt; - looks like oVirt is already doing a lot of what OpenStack is working on to achieve high-performance from KVM!&lt;/li&gt;
  &lt;li&gt;Preached on running Lago with OpenStack, Gluster and Cockpit. At least the first two items look really promising and I'm looking forward to a collaboration in those efforts. I might just try to do the Gluster one myself.&lt;/li&gt;
  &lt;li&gt;&lt;a title="Avocado and Jenkins: Test Automation and CI - Lukáš Doktor, Yash Mankad" href="https://www.youtube.com/watch?v=rqavfmPAt7o"&gt;Avocado and Jenkins: Test Automation and CI - Lukáš Doktor, Yash Mankad&lt;/a&gt; was interesting for me, as Avocado seems like a cool, mature testing framework - which I hope we can use in the future in CI testing.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having used the &lt;a href="/download/ovirt-live/&amp;quot;http://www.ovirt.org/download/ovirt-live/&amp;quot;"&gt;oVirt Live&lt;/a&gt; USB DoK image in both FOSDEM and DevConf, I've found several items where we can improve in and filed relevant RFEs for them [1][2].&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;The oVirt team has delivered numerous presentations in the virtualization track:
&lt;a title="Smart VM Scheduling - Martin Sivák" href="https://www.youtube.com/watch?v=cQqJEiK7-Ug"&gt;Smart VM Scheduling - Martin Sivák&lt;/a&gt;
&lt;a title="Host fencing in oVirt - Fixing the unknown and allowing VMs to be highly available - Martin Peřina" href="https://www.youtube.com/watch?v=V1JQtmdleaM"&gt;Host fencing in oVirt - Fixing the unknown and allowing VMs to be highly available - Martin Peřina&lt;/a&gt; ,
&lt;a title="Ceph integration with oVirt using Cinder - Nir Soffer" href="https://www.youtube.com/watch?v=4CbHTAkVDZo"&gt;Ceph integration with oVirt using Cinder - Nir Soffer&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The Gluster team has additionally provided more presentations:
&lt;a title="oVirt and Gluster Hyperconvergence - Ramesh Nachimuthu" href="https://www.youtube.com/watch?v=XudYwEWQF7U"&gt;oVirt and Gluster Hyperconvergence - Ramesh Nachimuthu&lt;/a&gt; ,
&lt;a title="Improvements in gluster for virtualization use case - Prasanna Kumar Kalever" href="https://www.youtube.com/watch?v=TczVVCbm8NE"&gt;Improvements in gluster for virtualization use case - Prasanna Kumar Kalever&lt;/a&gt;, which were all well received.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I'd like to thank our project's current community manager Mikey Ariel, and former community manager Brian Proffitt for once again, just one week after FOSDEM, leading the effort of representing the oVirt project and community in this event.&lt;/p&gt;

&lt;p&gt;1.&lt;a title="[RFE] register .vv files so they'll be opened automatically with remote-viewer" href="https://bugzilla.redhat.com/show_bug.cgi?id=1307261"&gt;[RFE] register .vv files so they'll be opened automatically with remote-viewer&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a title="[RFE] Disable power management (display and computer" href="https://bugzilla.redhat.com/show_bug.cgi?id=1307262"&gt;[RFE] Disable power management (display and computer&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
</feed>
